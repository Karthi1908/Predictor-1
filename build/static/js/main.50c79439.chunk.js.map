{"version":3,"sources":["helper/tezos.js","helper/WalletContext.js","helper/Loading.js","components/Header.js","components/Footer/Footer.js","helper/PredictionContext.js","components/Predict/index.js","components/assets/phone.png","components/assets/Herobg.png","components/Home/index.js","components/Mypreds/index.js","page/Portfolio/Portfolio.js","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_ADDRESS","Tezos","TezosToolkit","setPackerProvider","MichelCodecPacker","ContractProvider","contract","beaconWallet","BeaconWallet","name","preferredNetwork","setWalletProvider","wallet","useWallet","React","useState","activeAccount","setActiveAccount","connected","setConnected","useEffect","client","getActiveAccount","then","acc","connect","requestPermissions","network","type","rpcUrl","req","accountInfo","disconnect","clearActiveAccount","Loading","display","flexDirection","minHeight","height","justifyContent","alignItems","size","Redeem","useDisclosure","isOpen","onOpen","onClose","submit","e","preventDefault","target","elements","tokenId","amount","console","log","value","at","methods","redeemTokens","parseInt","send","op","confirmation","alert","onClick","onSubmit","required","placeholder","Header","links","history","useNavigate","useColorMode","whiteListProposer","colorMode","toggleColorMode","addProposers","address","op1","color","backgroundColor","px","py","h","icon","md","spacing","w","fontSize","paddingEnd","fontWeight","as","paddingStart","colorScheme","href","base","Button","cursor","minW","maxW","overflow","whiteSpace","textOverflow","Portfolio","paddingTop","paddingBottom","borderRadius","bgColor","pb","Footer","useColorModeValue","bg","padding","borderBottom","borderColor","position","className","PredictionContext","createContext","predictions","predictionsArray","updatePredictions","BuySellWindow","id","options","option","quantity","request","setRequest","buySubmit","Number","voteOnprediction","parseFloat","variant","width","margin","onChange","direction","map","i","borderWidth","p","isRequired","Predict","useParams","toString","useContext","data","setData","colors","text","border","cardBg","get","_","storage","predictionVoteSnapshot","snapshot","snapshotList","keys","pred","push","Math","round","volume","prediction","predictionName","lastDate","Date","endTime","toLocaleDateString","toLocaleTimeString","key","ref","predictionRef","result","predictionVoteResult","pstatus","predictionStatus","predictionOptions","snap","Volume","disclosure","maxWidth","minH","flexDir","allowToggle","flex","flexWrap","Home","inProgressArray","filter","completedArray","maxHeight","bgGradient","bgImage","HeroBg","bgPosition","bgSize","marginTop","boxSize","objectFit","src","phoneImg","alt","class","AddPredRes","predictResults","returnFocusOnClose","placement","closeOnBlur","textColor","marginLeft","htmlFor","UpdatePredStatus","status","updateStatus","AddNewPrediction","num","setNum","setOptions","resultRef","start","end","endValue","toISOString","startValue","addprediction","Object","Array","opt","MyPreds","myPreds","setMyPreds","admin","x","length","item","proposer","App","setPredictions","setPredictionsArray","preds","predArray","counter","Id","predList","initialColorMode","useSystemColorMode","Provider","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50c79439.chunk.js","sourcesContent":["import { NetworkType } from '@airgap/beacon-sdk';\r\nimport { BeaconWallet } from '@taquito/beacon-wallet';\r\nimport { TezosToolkit, MichelCodecPacker, compose } from '@taquito/taquito';\r\n//import { Tzip12Module, tzip12 } from \"@taquito/tzip12\";\r\n//import { Tzip16Module, tzip16, bytes2Char } from \"@taquito/tzip16\";\r\n\r\n//const CONTRACT_ADDRESS = 'KT1BavDyS4Qkv2xeRTzy5mf37oJcmHTSgtHR';\r\n//const TOKEN_ADDRESS = 'KT19Spcv2j1ktJd5EBTkg4XbnaEeRD1tWmhW';\r\n//const CONTRACT_ADDRESS = 'KT1DwGe6b1x3iqCGMgrFykasxEErt986Rgox';\r\n//const TOKEN_ADDRESS = 'KT1BvYkPGPau7xDSRxLVz7DQpuWZfrXBLL27';\r\n\r\nconst CONTRACT_ADDRESS = 'KT1QM2Drh18w6fnU13fwxBCDAToWjKfcgZm5'; //-- Mainnet \r\nconst TOKEN_ADDRESS = 'KT1U8jQyUkwsYVpgogrjSAKyQXi8kWengpzp';\r\n\r\n//const Tezos = new TezosToolkit('https://hangzhounet.smartpy.io');\r\n//const Tezos = new TezosToolkit('https://ithacanet.smartpy.io');\r\n//const Tezos = new TezosToolkit('https://mainnet.smartpy.io');\r\nconst Tezos = new TezosToolkit('https://mainnet.api.tez.ie');\r\nTezos.setPackerProvider(new MichelCodecPacker());\r\n\r\nconst ContractProvider = Tezos.contract;\r\n\r\nconst beaconWallet = new BeaconWallet({\r\n  name: 'Predictor',\r\n  preferredNetwork: \"mainnet\"\r\n});\r\n\r\nTezos.setWalletProvider(beaconWallet);\r\n\r\nconst wallet = Tezos.wallet;\r\n\r\nexport { CONTRACT_ADDRESS,TOKEN_ADDRESS, Tezos, ContractProvider, wallet, beaconWallet };\r\n","import { NetworkType, Network , DAppClient} from '@airgap/beacon-sdk';\r\nimport React from 'react';\r\nimport { beaconWallet } from './tezos';\r\n\r\nconst useWallet = () => {\r\n  const [activeAccount, setActiveAccount] = React.useState(null);\r\n  const [connected, setConnected] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    beaconWallet.client.getActiveAccount().then((acc) => {\r\n      if (acc) {\r\n        setActiveAccount(acc);\r\n        setConnected(true);\r\n      }\r\n    });\r\n  }, [activeAccount]);\r\n\r\n  const connect = async () => {\r\n    const currAcc = await beaconWallet.client.getActiveAccount();\r\n    if (!currAcc) {\r\n      const req = await beaconWallet.client.requestPermissions({\r\n        network: {\r\n          type: 'mainnet',\r\n\t  rpcUrl: 'https://mainnet.api.tez.ie'\r\n        },\r\n      });\r\n      if (req) {\r\n        setActiveAccount(req.accountInfo);\r\n        setConnected(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const disconnect = () => {\r\n    beaconWallet.client.clearActiveAccount();\r\n    setConnected(false);\r\n  };\r\n\r\n  return { connect, disconnect, activeAccount, connected };\r\n};\r\n\r\nexport { useWallet };\r\n","import { Box } from '@chakra-ui/layout';\r\nimport { Spinner } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      flexDirection=\"row\"\r\n      minHeight=\"100vh\"\r\n      height=\"100%\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Spinner size=\"lg\" />\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  HStack,\r\n  Container,\r\n  IconButton,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useDisclosure,\r\n  useColorModeValue,\r\n  Stack,\r\n  useColorMode,\r\n  Text,\r\n  Link,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Input,\r\n} from '@chakra-ui/react';\r\nimport { HamburgerIcon, CloseIcon, SunIcon, MoonIcon } from '@chakra-ui/icons';\r\nimport { useWallet } from '../helper/WalletContext';\r\nimport {\r\n  CONTRACT_ADDRESS,\r\n  TOKEN_ADDRESS,\r\n  wallet,\r\n  Tezos,\r\n} from '../helper/tezos';\r\nimport { TezosToolkit, MichelCodecPacker, compose } from '@taquito/taquito';\r\nimport Loading from '../helper/Loading';\r\n\r\nconst Redeem = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { tokenId, amount } = e.target.elements;\r\n    console.log(tokenId.value, amount.value);\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\r\n    const op = await contract.methods\r\n      .redeemTokens(parseInt(amount.value), parseInt(tokenId.value))\r\n      .send();\r\n    await op.confirmation(1);\r\n    alert('Redemption Completed!');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MenuItem onClick={onOpen}>Redeem</MenuItem>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Redeem Token</ModalHeader>\r\n          <ModalBody>\r\n            <form onSubmit={submit}>\r\n              <FormControl>\r\n                <Input\r\n                  required\r\n                  type=\"number\"\r\n                  name=\"tokenId\"\r\n                  placeholder=\"Token ID\"\r\n                ></Input>\r\n              </FormControl>\r\n              <FormControl>\r\n                <Input\r\n                  required\r\n                  type=\"number\"\r\n                  name=\"amount\"\r\n                  placeholder=\"Amount\"\r\n                />\r\n              </FormControl>\r\n              <Button type=\"submit\">Redeem</Button>\r\n            </form>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function Header({ links = [] }) {\r\n  const history = useNavigate();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { connect, disconnect, activeAccount, connected } = useWallet();\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const whiteListProposer = async () => {\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n    const op1 = await contract.methods\r\n      .addProposers(activeAccount.address)\r\n      .send();\r\n\r\n    await op1.confirmation(1);\r\n    alert('Proposer Whitelisted!');\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      color={'white'}\r\n      // bg={useColorModeValue('222737', '222737')}\r\n      backgroundColor=\"#051B07\"\r\n      px={4}\r\n      py={4}\r\n    >\r\n      <Flex\r\n        h={16}\r\n        alignItems={'center'}\r\n        justifyContent={'space-between'}\r\n        px=\"20\"\r\n      >\r\n        <IconButton\r\n          size={'md'}\r\n          icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\r\n          aria-label={'Open Menu'}\r\n          display={{ md: 'none' }}\r\n          onClick={isOpen ? onClose : onOpen}\r\n        />\r\n\r\n        <HStack spacing={8} alignItems={'center'} w=\"33%\">\r\n          <Text fontSize=\"2xl\" paddingEnd=\"3\" color=\"white\" fontWeight=\"bold\">\r\n            Predict{''}\r\n            <Box as=\"span\" color=\"#22EF01\">\r\n              or.\r\n            </Box>\r\n          </Text>\r\n        </HStack>\r\n\r\n        <Flex alignItems={'center'} justifyContent={'center'} w=\"33%\">\r\n          <Link\r\n            fontSize=\"1xl\"\r\n            paddingStart=\"3\"\r\n            paddingEnd=\"3\"\r\n            colorScheme=\"blue\"\r\n            href=\"/\"\r\n          >\r\n            Marketplace\r\n          </Link>\r\n          <Link\r\n            fontSize=\"1xl\"\r\n            paddingStart=\"3\"\r\n            paddingEnd=\"3\"\r\n            colorScheme=\"blue\"\r\n            href=\"/Portfolio\"\r\n          >\r\n            Portfolio\r\n          </Link>\r\n        </Flex>\r\n\r\n        <Flex alignItems={'center'} w=\"33%\" justifyContent={'end'}>\r\n          {/* <IconButton\r\n            marginRight=\"10px\"\r\n            icon={colorMode === 'dark' ? <SunIcon /> : <MoonIcon />}\r\n            onClick={toggleColorMode}\r\n          /> */}\r\n          <Box display={{ base: 'none', md: 'flex' }}>\r\n            {!connected ? (\r\n              // <Button color={'black'} onClick={connect}>\r\n              //   Connect Wallet\r\n              // </Button>\r\n              <Flex alignItems={'center'} justifyContent={'end'}>\r\n                <Link\r\n                  fontSize=\"1xl\"\r\n                  paddingStart=\"3\"\r\n                  paddingEnd=\"3\"\r\n                  colorScheme=\"blue\"\r\n                >\r\n                  Sign In\r\n                </Link>\r\n                <Link\r\n                  fontSize=\"1xl\"\r\n                  px=\"10\"\r\n                  paddingTop=\"2\"\r\n                  paddingBottom=\"2\"\r\n                  borderRadius=\"15\"\r\n                  colorScheme=\"blue\"\r\n                  href=\"/Portfolio\"\r\n                  bgColor={'white'}\r\n                  color={'black'}\r\n                >\r\n                  Sign Up\r\n                </Link>\r\n              </Flex>\r\n            ) : (\r\n              <Menu>\r\n                <MenuButton as={Button} cursor={'pointer'} minW={0}>\r\n                  <Text\r\n                    maxW=\"300px\"\r\n                    overflow=\"hidden\"\r\n                    whiteSpace=\"nowrap\"\r\n                    textOverflow=\"ellipsis\"\r\n                  >\r\n                    {activeAccount?.address}\r\n                  </Text>\r\n                </MenuButton>\r\n                <MenuList>\r\n                  <MenuItem onClick={() => history('/mypreds')}>\r\n                    My Predictions\r\n                  </MenuItem>\r\n                  <MenuItem onClick={whiteListProposer}>Whitelist Me</MenuItem>\r\n                  <MenuItem onClick={disconnect}>Disconnect</MenuItem>\r\n                  <Portfolio />\r\n                  <Redeem />\r\n                </MenuList>\r\n              </Menu>\r\n            )}\r\n          </Box>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      {isOpen ? (\r\n        <Box pb={4} display={{ md: 'none' }}>\r\n          <Stack as={'nav'} spacing={4}>\r\n            {!connected ? (\r\n              <Button color={'black'} onClick={connect}>\r\n                Connect Wallet\r\n              </Button>\r\n            ) : (\r\n              <Menu>\r\n                <MenuButton as={Button} cursor={'pointer'} minW={0}>\r\n                  <Text\r\n                    maxW=\"300px\"\r\n                    overflow=\"hidden\"\r\n                    whiteSpace=\"nowrap\"\r\n                    textOverflow=\"ellipsis\"\r\n                  >\r\n                    {activeAccount?.address}\r\n                  </Text>\r\n                </MenuButton>\r\n                <MenuList>\r\n                  <MenuItem onClick={() => history('/mypreds')}>\r\n                    My Predictions\r\n                  </MenuItem>\r\n                  <MenuItem onClick={disconnect}>Disconnect</MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            )}\r\n          </Stack>\r\n        </Box>\r\n      ) : null}\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst Redeem1 = (tokenID) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  console.log('tokenId', tokenID.tokenID.toString());\r\n  const colors = {\r\n    bg: useColorModeValue('purple.300', 'purple.600'),\r\n    text: useColorModeValue('purple', 'white'),\r\n  };\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { amount } = e.target.elements;\r\n    console.log(tokenID.tokenID, amount.value);\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\r\n    await contract.methods.redeemTokens(amount.value, tokenID.tokenID).send();\r\n  };\r\n\r\n  return (\r\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\r\n      <PopoverTrigger>\r\n        <Button bg={colors.bg} textColor={colors.text}>\r\n          Redeem\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent textColor={colors.text}>\r\n        <PopoverHeader fontWeight=\"semibold\">Redeem Token</PopoverHeader>\r\n        <PopoverBody>\r\n          <form onSubmit={submit}>\r\n            <FormControl>\r\n              <FormLabel htmlFor=\"tokenID\">\r\n                Token Id : {tokenID.tokenID.toString()}{' '}\r\n              </FormLabel>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                required\r\n                type=\"number\"\r\n                name=\"amount\"\r\n                placeholder=\"Amount\"\r\n              />\r\n            </FormControl>\r\n            <Button type=\"submit\">Redeem</Button>\r\n          </form>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Footer.css';\r\nimport { FcNext } from 'react-icons/fc';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Center,\r\n  HStack,\r\n  Container,\r\n  IconButton,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useDisclosure,\r\n  useColorModeValue,\r\n  Stack,\r\n  useColorMode,\r\n  Text,\r\n  Link,\r\n  Heading,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormControl,\r\n  Form,\r\n  Formik,\r\n  FormLabel,\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Input,\r\n} from '@chakra-ui/react';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <>\r\n      <Box\r\n        color={useColorModeValue('white')}\r\n        bg={'#051B07'}\r\n        px={20}\r\n        paddingBottom=\"7\"\r\n      >\r\n        <Flex padding={5} justifyContent={'center'}>\r\n          <Link paddingStart=\"5\" paddingEnd=\"5\">\r\n            Contact Us\r\n          </Link>\r\n          <Link paddingStart=\"5\" paddingEnd=\"5\">\r\n            Privacy Policy\r\n          </Link>\r\n          <Link paddingStart=\"5\" paddingEnd=\"5\">\r\n            Terms of Use\r\n          </Link>\r\n          <Link paddingStart=\"5\" paddingEnd=\"5\">\r\n            How it Works\r\n          </Link>\r\n          <Link paddingStart=\"5\" paddingEnd=\"5\">\r\n            FAQs\r\n          </Link>\r\n          <Link paddingStart=\"5\" paddingEnd=\"5\">\r\n            Blogs\r\n          </Link>\r\n        </Flex>\r\n\r\n        <Flex\r\n          paddingStart=\"20\"\r\n          paddingEnd=\"20\"\r\n          paddingBottom=\"10\"\r\n          paddingTop=\"18\"\r\n          borderBottom=\"1px solid\"\r\n          borderColor=\"gray\"\r\n        >\r\n          <Box w=\"50%\" paddingEnd=\"20\">\r\n            <Flex flexDirection=\"column\">\r\n              <Heading as=\"h3\" size=\"lg\" paddingBottom=\"3\">\r\n                Disclaimers\r\n              </Heading>\r\n              <Text fontSize=\"sm\">\r\n                The Predictor website (“Site”) is for informational and\r\n                educational purposes only. The Site displays existing markets\r\n                deployed on the Polygon blockchain and is a graphical user\r\n                interface for both visualizing data from on-chain activity and\r\n                interacting with smart contracts directly from your own Polygon\r\n                wallet. Adventure One QSS Inc. takes no custody of users' crypto\r\n                assets and does not host any markets. None of the material on\r\n                the Site is intended to be, nor does it constitute, a\r\n                solicitation, recommendation or offer to buy or sell any\r\n                security, commodity interest, derivative, financial product or\r\n                instrument. Users are responsible for complying with all\r\n                applicable laws and should conduct their own analysis and\r\n                consult with professional advisors prior to entering into any\r\n                smart contracts. Trading is not available to Restricted Persons,\r\n                including US Persons. See our Terms of Use.\r\n              </Text>\r\n            </Flex>\r\n          </Box>\r\n\r\n          <Box w=\"50%\">\r\n            <Box w=\"100%\">\r\n              <Heading as=\"h4\" size=\"sm\">\r\n                Subcribe to our newsletter\r\n              </Heading>\r\n              <Box paddingTop=\"7\" w=\"100%\">\r\n                <form position=\"relative\">\r\n                  <label className=\"label\">\r\n                    <input\r\n                      className=\"email\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Email Address here...\"\r\n                    />\r\n                  </label>\r\n                  <input\r\n                    className=\"btn-submit\"\r\n                    type=\"submit\"\r\n                    value=\"Subscribe\"\r\n                  />\r\n                  {/* <FcNext position=\"absolute\" marginTop=\"-10\" /> */}\r\n                </form>\r\n              </Box>\r\n            </Box>\r\n\r\n            <Box paddingTop=\"8\">\r\n              <Heading as=\"h4\" size=\"sm\" paddingBottom=\"3\">\r\n                Bet on your beliefs\r\n              </Heading>\r\n              <Text fontSize=\"sm\">\r\n                Polymarket is a decentralized information markets platform,\r\n                harnessing the power of free markets to demystify the real world\r\n                events that matter most to you.\r\n              </Text>\r\n            </Box>\r\n          </Box>\r\n        </Flex>\r\n        <Center paddingTop=\"7\">© 2022 Predictor. All rights reserved.</Center>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst PredictionContext = React.createContext({\r\n  predictions: {},\r\n  predictionsArray: [],\r\n  updatePredictions: () => {},\r\n});\r\n\r\nexport default PredictionContext;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  useColorModeValue,\r\n  Text,\r\n  Tabs,\r\n  TabList,\r\n  Tab,\r\n  TabPanels,\r\n  TabPanel,\r\n  Button,\r\n  RadioGroup,\r\n  Stack,\r\n  Radio,\r\n  NumberInput,\r\n  NumberInputField,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n} from '@chakra-ui/react';\r\nimport PredictionContext from '../../helper/PredictionContext';\r\nimport { useParams  } from 'react-router-dom';\r\nimport Loading from '../../helper/Loading';\r\nimport { CONTRACT_ADDRESS, wallet } from '../../helper/tezos';\r\n\r\nconst BuySellWindow = ({ id, options }) => {\r\n  const [request, setRequest] = React.useState({\r\n    option: options[0],\r\n    quantity: 0,\r\n  });\r\n\r\n  const buySubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { option, quantity } = e.target.elements;\r\n\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\tid = Number(id);\r\n\r\n    const op = await contract.methods\r\n      .voteOnprediction(id, option.value)\r\n      .send({\r\n        amount: parseFloat(quantity.value / 100) ,\r\n      })\r\n      \r\n\tawait op.confirmation(1);\r\n    alert(\"Transaction Completed!\");  \r\n  };\r\n\r\n  return (\r\n    <Tabs variant=\"soft-rounded\" width=\"100%\">\r\n      <TabList>\r\n        <Tab>Options</Tab>\r\n      </TabList>\r\n      <TabPanels>\r\n        <TabPanel>\r\n          <form onSubmit={buySubmit}>\r\n            <Container\r\n              padding={{ base: '0' }}\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n            >\r\n              <Box margin=\"3\">\r\n                <Text fontWeight=\"bold\" fontSize=\"md\">\r\n                  Pick an option\r\n                </Text>\r\n                <RadioGroup\r\n                  onChange={(e) =>\r\n                    setRequest((request) => {\r\n                      return {\r\n                        ...request,\r\n                        option: e,\r\n                      };\r\n                    })\r\n                  }\r\n                  value={request.option}\r\n                  name=\"option\"\r\n                >\r\n                  <Stack direction=\"column\">\r\n                    {options.map((option, i) => {\r\n                      return (\r\n                        <Radio key={i} value={option}>\r\n                          <Box\r\n                            borderWidth=\"1px\"\r\n                            borderColor=\"gray.400\"\r\n                            p=\"2\"\r\n                            borderRadius=\"2xl\"\r\n                          >\r\n                            {option}\r\n                          </Box>\r\n                        </Radio>\r\n                      );\r\n                    })}\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Box>\r\n              <Box margin=\"3\">\r\n                <Text fontWeight=\"bold\" fontSize=\"lg\">\r\n                  Amount of shares\r\n                </Text>\r\n                <NumberInput\r\n                  isRequired\r\n                  placeholder=\"Shares\"\r\n                  onChange={(e) =>\r\n                    setRequest((request) => {\r\n                      return {\r\n                        ...request,\r\n                        quantity: e,\r\n                      };\r\n                    })\r\n                  }\r\n                  value={request.quantity}\r\n                  name=\"quantity\"\r\n                >\r\n                  <NumberInputField />\r\n                </NumberInput>\r\n              </Box>\r\n              <Box margin=\"3\">\r\n                <Button type=\"submit\">Buy</Button>\r\n              </Box>\r\n            </Container>\r\n          </form>\r\n        </TabPanel>\r\n        <TabPanel>Lol2</TabPanel>\r\n      </TabPanels>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\n\r\nexport default function Predict() {\r\n  \r\n  let { id } = useParams();\r\n  console.log( \"ID \", id);\r\n  id = id.toString();\r\n  const { predictions } = React.useContext(PredictionContext);\r\n  const [data, setData] = React.useState(null);\r\n  const colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n    border: useColorModeValue('purple.900', 'purple.100'),\r\n    cardBg: useColorModeValue('blue.200', 'blue.700'),\r\n  };\r\n\r\n  React.useEffect(async () => {\r\n    const _ = await predictions.get(id).then(value => {return value});\r\n\tconst contract = await wallet.at(CONTRACT_ADDRESS);\r\n\t\tconst storage = await contract.storage();\r\n\t\tconst snapshot = await storage.predictionVoteSnapshot.get(id).then(value => {return value});\r\n\t\tconst snapshotList = [];\r\n\t\t\r\n\t\tfor (let pred of snapshot.keys()) {\r\n\t\t\tif (pred != 'Total') {\t\t\t  \r\n\t\t  snapshotList.push({ id: pred, value: (Math.round(snapshot.get(pred) * 100 / snapshot.get('Total'))).toString() }); }\r\n\t\t  \r\n\t\t  console.log(snapshotList);\r\n\t\t  \r\n      }\r\n\t  \r\n\t  let volume = (snapshot.get('Total') / 100).toString();\r\n\t  console.log(\"volume :\", volume);\r\n\r\n\tsetData({\r\n      prediction: _.predictionName,\r\n      lastDate:\r\n        new Date(_.endTime).toLocaleDateString() +\r\n        ' ' +\r\n        new Date(_.endTime).toLocaleTimeString(),\r\n      key: id,\r\n      ref: _.predictionRef,\r\n\t  result: _.predictionVoteResult,\r\n      pstatus: _.predictionStatus,\r\n      options: _.predictionOptions,\r\n\t  snap : snapshotList,\r\n\t  Volume : volume,\r\n\r\n      disclosure:\r\n        \"Predictor is for informational and educational purposes only. We take no custody of anyone's money or cryptocurrency. Predictor displays existing markets live on the Tezos blockchain and is a graphical user interface for both visualizing data and market trends from on-chain activity, and interacting with said smart contracts directly via your Web 3 enabled wallet.\",\r\n    });\r\n  }, []);\r\n\r\n  return data ? (\r\n    <Container\r\n      maxWidth=\"100vw\"\r\n      width=\"auto\"\r\n      bg={colors.bg}\r\n      color={colors.text}\r\n      height=\"auto\"\r\n      minH=\"92vh\"\r\n      display=\"flex\"\r\n      flexDir=\"column\"\r\n      justifyContent=\"center\"\r\n      padding=\"0 15% 0 15%\"\r\n    >\r\n      <Accordion allowToggle margin=\"6\">\r\n        <AccordionItem>\r\n          <h2>\r\n            <AccordionButton>\r\n              <Box flex=\"1\">Please Read this before making any purchases</Box>\r\n            </AccordionButton>\r\n          </h2>\r\n          <AccordionPanel p=\"6\">{data.disclosure}</AccordionPanel>\r\n        </AccordionItem>\r\n      </Accordion>\r\n      <Box\r\n        p=\"6\"\r\n        maxW=\"max-content\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        borderColor={colors.border}\r\n        overflow=\"hidden\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <Text fontSize=\"sm\">Prediction id: {data.ref} </Text>\r\n\r\n        <Text\r\n          fontSize=\"lg\"\r\n          fontWeight=\"bold\"\r\n          margin={{ base: '1', md: '1' }}\r\n          maxWidth=\"lg\"\r\n          overflow=\"visible\"\r\n          textOverflow=\"clip\"\r\n        >\r\n          {data.prediction}\r\n        </Text>\r\n      </Box>\r\n      <Box\r\n        p=\"3\"\r\n        maxW=\"max-content\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        borderColor={colors.border}\r\n        overflow=\"hidden\"\r\n        display=\"flex\"\r\n        flexDirection=\"row\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <Box\r\n          p=\"2\"\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          borderColor={colors.border}\r\n          bg={colors.cardBg}\r\n          overflow=\"hidden\"\r\n          display=\"flex\"\r\n          flexDir=\"column\"\r\n          margin={{ base: '0', md: '2' }}\r\n        >\r\n          <Text fontSize=\"sm\">Open Till</Text>\r\n          <Text fontSize=\"l\">{data.lastDate}</Text>\r\n        </Box>\r\n        <Box\r\n          p=\"2\"\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          borderColor={colors.border}\r\n          bg={colors.cardBg}\r\n          overflow=\"hidden\"\r\n          display=\"flex\"\r\n          flexDir=\"column\"\r\n          margin={{ base: '0', md: '2' }}\r\n        >\r\n          <Text fontSize=\"sm\">Status</Text>\r\n          <Text fontSize=\"l\">{data.pstatus}</Text>\r\n        </Box>\r\n\t\t<Box\r\n          p=\"2\"\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          borderColor={colors.border}\r\n          bg={colors.cardBg}\r\n          overflow=\"hidden\"\r\n          display=\"flex\"\r\n          flexDir=\"column\"\r\n          margin={{ base: '0', md: '2' }}\r\n        >\r\n          <Text fontSize=\"sm\">Result</Text>\r\n          <Text fontSize=\"l\">{data.result}</Text>\r\n        </Box>\r\n\r\n      </Box>\r\n\t  <Text fontSize=\"sm\">Volume :</Text>\r\n         <Box p=\"2\"\r\n\t\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\tborderColor={colors.border}\r\n\r\n\t\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\tflexDir=\"row\" flexWrap=\"wrap\">\r\n\t\t\t\t\t\r\n\t\t  <Box p=\"2\"\r\n\t\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\tborderColor={colors.border}\r\n\t\t\t\t\tbg={colors.cardBg}\r\n\t\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\tflexDir=\"row\"\r\n\t\t\t\t\tmargin={{ base: '0', md: '1' }}>\r\n\t\t  <Text color={colors.text}>Total : &nbsp;</Text>\r\n\t\t  <Text color={colors.text}>{data.Volume} Tez</Text>\r\n\t\t  </Box>\r\n\t\t \r\n        {data.snap.map((pred, i) => {\r\n          return (\r\n           \r\n\t\t\t\t<Box p=\"2\"\r\n\t\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\tborderColor={colors.border}\r\n\t\t\t\t\tbg={colors.cardBg}\r\n\t\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\tflexDir=\"row\"\r\n\t\t\t\t\tmargin={{ base: '0', md: '1' }}>\r\n              <Text color={colors.text}>{pred.id} : &nbsp;</Text>\r\n\t\t\t  \r\n\t\t\t  <Text color={colors.text}>{pred.value} %</Text>\r\n\t\t\t  </Box>\r\n   \r\n          );\r\n        })}\r\n      </Box>\r\n\t  <Box\r\n        margin=\"6\"\r\n        p={{ base: '2', md: '6' }}\r\n        maxW=\"max-content\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        borderColor={colors.border}\r\n        overflow=\"hidden\"\r\n        display=\"flex\"\r\n        flexDirection=\"row\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <BuySellWindow id={id} options={data.options} />\r\n      </Box>\r\n\r\n    </Container>\r\n  ) : (\r\n    <Loading />\r\n  );\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/phone.b064c002.png\";","export default __webpack_public_path__ + \"static/media/Herobg.f160b25e.png\";","import React from 'react';\r\nimport './index.css';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Text,\r\n  Center,\r\n  useColorModeValue,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  Heading,\r\n  Image,\r\n  Select,\r\n  Link,\r\n  Flex,\r\n  Button,\r\n  bgImage,\r\n} from '@chakra-ui/react';\r\nimport PredictionContext from '../../helper/PredictionContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport phoneImg from '../assets/phone.png';\r\n\r\nimport { AiFillCheckCircle } from 'react-icons/ai';\r\nimport { FaLongArrowAltRight } from 'react-icons/fa';\r\nimport { HiOutlineArrowSmLeft, HiOutlineArrowSmRight } from 'react-icons/hi';\r\nimport HeroBg from '../assets/Herobg.png';\r\n\r\nexport default function Home() {\r\n  const { predictionsArray } = React.useContext(PredictionContext);\r\n  const history = useNavigate();\r\n  const colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n  };\r\n  const inProgressArray = predictionsArray.filter(function (prediction) {\r\n    return prediction.value.predictionStatus == 'Prediction In-Progress';\r\n  });\r\n  const completedArray = predictionsArray.filter(function (prediction) {\r\n    return prediction.value.predictionStatus != 'Prediction In-Progress';\r\n  });\r\n\r\n  return (\r\n    <Container\r\n      width=\"auto\"\r\n      maxWidth=\"100vw\"\r\n      //   bgGradient=\"linear(to-l, #1B3318 20%, #0C4A02 20%)\"\r\n      // bgGradient=\"linear(to-r, #202b2f, #121b19)\"\r\n      //   bgColor=\"#202b2f\"\r\n      className=\"main-container\"\r\n      height=\"auto\"\r\n      maxHeight=\"1000vh\"\r\n      // paddingTop=\"10vh\"\r\n      paddingBottom=\"15vh\"\r\n      paddingStart=\"0\"\r\n      paddingEnd=\"0\"\r\n    >\r\n      <Box\r\n        display=\"flex\"\r\n        bgGradient=\"linear(to-r, #202433, #181c27)\"\r\n        width=\"100%\"\r\n        paddingStart=\"25vh\"\r\n        paddingEnd=\"25vh\"\r\n        paddingTop=\"10vh\"\r\n        bgImage={HeroBg}\r\n        bgPosition=\"center\"\r\n        bgSize=\"cover\"\r\n      >\r\n        <Box w=\"55%\">\r\n          <Heading\r\n            className=\"mainfont\"\r\n            as=\"h2\"\r\n            fontWeight=\"semibold\"\r\n            size=\"4xl\"\r\n          >\r\n            Predict your Finances\r\n          </Heading>\r\n          <Text color=\"gray\" marginTop=\"7\">\r\n            dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            width=\"70%\"\r\n            marginTop=\"7\"\r\n          >\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <AiFillCheckCircle color=\"#AEF8A2\" fontSize=\"21\" />\r\n              &nbsp;&nbsp;<p>100% Guarantee</p>\r\n            </Box>\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <AiFillCheckCircle color=\"#AEF8A2\" fontSize=\"21\" />\r\n              &nbsp;&nbsp;<p>Safe Payment</p>\r\n            </Box>\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <AiFillCheckCircle color=\"#AEF8A2\" fontSize=\"21\" />\r\n              &nbsp;&nbsp;<p>24/7 Support</p>\r\n            </Box>\r\n          </Box>\r\n          <Box marginTop=\"10\" display=\"flex\">\r\n            <Link\r\n              py=\"3\"\r\n              px=\"10\"\r\n              bgColor=\"#22EF01\"\r\n              color=\"#343538\"\r\n              borderRadius=\"15\"\r\n            >\r\n              Get Started\r\n            </Link>\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <Link py=\"3\" paddingStart=\"10\" paddingEnd=\"3\">\r\n                Learn more\r\n              </Link>\r\n              <FaLongArrowAltRight fontSize=\"20\" paddingTop=\"20\" />\r\n            </Box>\r\n          </Box>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            width=\"70%\"\r\n            marginTop=\"10\"\r\n          >\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"start\">\r\n              <Heading as=\"h3\" fontWeight=\"semibold\" size=\"xl\" color=\"#AEF8A2\">\r\n                200+\r\n              </Heading>\r\n              <p>Markets</p>\r\n            </Box>\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"start\">\r\n              <Heading as=\"h3\" fontWeight=\"semibold\" size=\"xl\" color=\"#AEF8A2\">\r\n                9000+\r\n              </Heading>\r\n              <p>Active Users</p>\r\n            </Box>\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"start\">\r\n              <Heading as=\"h3\" fontWeight=\"semibold\" size=\"xl\" color=\"#AEF8A2\">\r\n                10M+\r\n              </Heading>\r\n              <p>Transactions</p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box w=\"45%\">\r\n          <Image\r\n            boxSize=\"700px\"\r\n            objectFit=\"cover\"\r\n            marginTop=\"-100\"\r\n            src={phoneImg}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        flexWrap=\"wrap\"\r\n        paddingStart=\"25vh\"\r\n        paddingEnd=\"25vh\"\r\n        paddingTop=\"6vh\"\r\n      >\r\n        <Heading as=\"h3\" fontWeight=\"semibold\" margin=\"0px\" size=\"lg\">\r\n          FEATURED MARKETS\r\n        </Heading>\r\n\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"row\"\r\n          flexWrap=\"wrap\"\r\n          w=\"100%\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          marginTop=\"5vh\"\r\n        >\r\n          {inProgressArray.map((pred, i) => {\r\n            return (\r\n              <Box\r\n                key={i}\r\n                onClick={() => history('/predict/' + pred.id)}\r\n                display=\"flex\"\r\n                w=\"29%\"\r\n                borderRadius=\"10px\"\r\n                flexDirection=\"row\"\r\n                padding=\"20px\"\r\n                backgroundColor=\"#12231b\"\r\n              >\r\n                <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n                  {/* <Text color={'white'}>\r\n                    {' '}\r\n                    <b>ID </b>: {pred.value.predictionRef}\r\n                  </Text> */}\r\n                  <Box w=\"20%\">\r\n                    <Image\r\n                      height=\"50px\"\r\n                      width=\"50px\"\r\n                      objectFit=\"cover\"\r\n                      borderRadius=\"50%\"\r\n                      src=\"https://bit.ly/dan-abramov\"\r\n                      alt=\"Dan Abramov\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <Box w=\"80%\">\r\n                    <Text\r\n                      color={'#AEF8A2'}\r\n                      fontSize=\"lg\"\r\n                      fontWeight={'bold'}\r\n                      paddingStart=\"2\"\r\n                    >\r\n                      {' '}\r\n                      {pred.value.predictionName}{' '}\r\n                    </Text>\r\n                  </Box>\r\n\r\n                  {/* <Text color={'white'}>\r\n                    <b>Status </b>: {pred.value.predictionStatus}\r\n                  </Text> */}\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n          {inProgressArray.map((pred, i) => {\r\n            return (\r\n              <Box\r\n                key={i}\r\n                onClick={() => history('/predict/' + pred.id)}\r\n                display=\"flex\"\r\n                w=\"29%\"\r\n                borderRadius=\"10px\"\r\n                flexDirection=\"row\"\r\n                padding=\"20px\"\r\n                backgroundColor=\"#12231b\"\r\n              >\r\n                <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n                  {/* <Text color={'white'}>\r\n                    {' '}\r\n                    <b>ID </b>: {pred.value.predictionRef}\r\n                  </Text> */}\r\n                  <Box w=\"20%\">\r\n                    <Image\r\n                      height=\"50px\"\r\n                      width=\"50px\"\r\n                      objectFit=\"cover\"\r\n                      borderRadius=\"50%\"\r\n                      src=\"https://bit.ly/dan-abramov\"\r\n                      alt=\"Dan Abramov\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <Box w=\"80%\">\r\n                    <Text\r\n                      color={'#AEF8A2'}\r\n                      fontSize=\"lg\"\r\n                      fontWeight={'bold'}\r\n                      paddingStart=\"2\"\r\n                    >\r\n                      {' '}\r\n                      {pred.value.predictionName}{' '}\r\n                    </Text>\r\n                  </Box>\r\n\r\n                  {/* <Text color={'white'}>\r\n                    <b>Status </b>: {pred.value.predictionStatus}\r\n                  </Text> */}\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n          {inProgressArray.map((pred, i) => {\r\n            return (\r\n              <Box\r\n                key={i}\r\n                onClick={() => history('/predict/' + pred.id)}\r\n                display=\"flex\"\r\n                w=\"29%\"\r\n                borderRadius=\"10px\"\r\n                flexDirection=\"row\"\r\n                padding=\"20px\"\r\n                backgroundColor=\"#12231b\"\r\n              >\r\n                <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n                  {/* <Text color={'white'}>\r\n                    {' '}\r\n                    <b>ID </b>: {pred.value.predictionRef}\r\n                  </Text> */}\r\n                  <Box w=\"20%\">\r\n                    <Image\r\n                      height=\"50px\"\r\n                      width=\"50px\"\r\n                      objectFit=\"cover\"\r\n                      borderRadius=\"50%\"\r\n                      src=\"https://bit.ly/dan-abramov\"\r\n                      alt=\"Dan Abramov\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <Box w=\"80%\">\r\n                    <Text\r\n                      color={'#AEF8A2'}\r\n                      fontSize=\"lg\"\r\n                      fontWeight={'bold'}\r\n                      paddingStart=\"2\"\r\n                    >\r\n                      {' '}\r\n                      {pred.value.predictionName}{' '}\r\n                    </Text>\r\n                  </Box>\r\n\r\n                  {/* <Text color={'white'}>\r\n                    <b>Status </b>: {pred.value.predictionStatus}\r\n                  </Text> */}\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Box>\r\n\r\n        <Box w=\"100%\" display=\"flex\" marginTop=\"20vh\">\r\n          <Box w=\"33.33%\">\r\n            <div>\r\n              <div className=\"wrapper\">\r\n                <div className=\"search\">\r\n                  <input\r\n                    id=\"search\"\r\n                    type=\"search\"\r\n                    placeholder=\"Search markets\"\r\n                  />\r\n                  <i class=\"fas fa-search\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Box>\r\n          <Box w=\"33.33%\" paddingStart=\"3\" paddingEnd=\"3\">\r\n            <Select placeholder=\"CATEGORY\" color=\"black\" bgColor=\"white\">\r\n              <option value=\"option1\">Option 1</option>\r\n              <option value=\"option2\">Option 2</option>\r\n              <option value=\"option3\">Option 3</option>\r\n            </Select>\r\n          </Box>\r\n          <Box w=\"33.33%\">\r\n            <Select placeholder=\"SORT BY: VOLUME\" color=\"black\" bgColor=\"white\">\r\n              <option value=\"option1\">Option 1</option>\r\n              <option value=\"option2\">Option 2</option>\r\n              <option value=\"option3\">Option 3</option>\r\n            </Select>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"row\"\r\n          flexWrap=\"wrap\"\r\n          w=\"100%\"\r\n          paddingStart=\"10\"\r\n          paddingEnd=\"10\"\r\n          paddingTop=\"5\"\r\n          paddingBottom=\"5\"\r\n          bgColor=\"white\"\r\n          borderRadius=\"10\"\r\n          marginTop=\"3\"\r\n        >\r\n          <Box w=\"70%\">\r\n            <Text color=\"black\">Market</Text>\r\n          </Box>\r\n          <Box w=\"10%\">\r\n            <Center color=\"black\">Volume</Center>\r\n          </Box>\r\n          <Box w=\"10%\">\r\n            <Center color=\"black\">Yes</Center>\r\n          </Box>\r\n          <Box w=\"10%\">\r\n            <Center color=\"black\">No</Center>\r\n          </Box>\r\n        </Box>\r\n        <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\" w=\"100%\">\r\n          {completedArray.map((pred, i) => {\r\n            return (\r\n              <Box\r\n                key={i}\r\n                onClick={() => history('/predict/' + pred.id)}\r\n                display=\"flex\"\r\n                maxWidth=\"100%\"\r\n                borderBottom=\"1px solid\"\r\n                borderColor=\"gray\"\r\n                flexDirection=\"row\"\r\n                // borderRadius=\"20px\"\r\n                padding=\"20px\"\r\n                margin=\"10px\"\r\n              >\r\n                <Box\r\n                  display=\"flex\"\r\n                  flexDirection=\"row\"\r\n                  alignItems=\"center\"\r\n                  flexWrap=\"wrap\"\r\n                  w=\"100%\"\r\n                >\r\n                  <Box w=\"5%\">\r\n                    <Text color={colors.text}>\r\n                      {/* <b>ID </b>: {pred.value.predictionRef} */}\r\n                      <Image\r\n                        height=\"50px\"\r\n                        width=\"50px\"\r\n                        objectFit=\"cover\"\r\n                        borderRadius=\"50%\"\r\n                        src=\"https://bit.ly/dan-abramov\"\r\n                        alt=\"Dan Abramov\"\r\n                        border=\"1px solid\"\r\n                        borderColor=\"#22EF01\"\r\n                      />\r\n                    </Text>\r\n                  </Box>\r\n\r\n                  <Box w=\"55%\" paddingEnd=\"10\" paddingStart=\"3\">\r\n                    <Text color=\"white\"> {pred.value.predictionName} </Text>\r\n                  </Box>\r\n\r\n                  <Box w=\"10%\">\r\n                    <Center color={'#15803D'}>\r\n                      {/* <b>Status </b>: {pred.value.predictionStatus} */}\r\n                      100%\r\n                    </Center>\r\n                  </Box>\r\n                  <Box w=\"10%\">\r\n                    <Center color={'#6EFB57'}>\r\n                      {/* <b>Status </b>: {pred.value.predictionStatus} */}\r\n                      $1,003,797\r\n                    </Center>\r\n                  </Box>\r\n                  <Box w=\"10%\">\r\n                    <Center color={'#6EFB57'}>\r\n                      {/* <b>Status </b>: {pred.value.predictionStatus} */}\r\n                      $0.41\r\n                    </Center>\r\n                  </Box>\r\n                  <Box w=\"10%\">\r\n                    <Center color={'#6EFB57'}>\r\n                      {/* <b>Status </b>: {pred.value.predictionStatus} */}\r\n                      $0.59\r\n                    </Center>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Box>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" marginTop=\"6vh\">\r\n          <Button\r\n            bgColor=\"#3B3A3A\"\r\n            color=\"white\"\r\n            px=\"4\"\r\n            py=\"2\"\r\n            borderColor=\"white\"\r\n            border=\"1px solid\"\r\n          >\r\n            <HiOutlineArrowSmLeft fontSize=\"22\" />\r\n          </Button>\r\n\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <Text px=\"3\">Page</Text>\r\n            <Button\r\n              bgColor=\"#3B3A3A\"\r\n              color=\"white\"\r\n              px=\"4\"\r\n              py=\"2\"\r\n              borderColor=\"white\"\r\n              border=\"1px solid\"\r\n            >\r\n              64\r\n            </Button>\r\n            <Text px=\"3\">of 835</Text>\r\n          </Box>\r\n\r\n          <Button\r\n            bgColor=\"#3B3A3A\"\r\n            color=\"white\"\r\n            px=\"4\"\r\n            py=\"2\"\r\n            borderColor=\"white\"\r\n            border=\"1px solid\"\r\n          >\r\n            <HiOutlineArrowSmRight fontSize=\"22\" />\r\n          </Button>\r\n        </Flex>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PredictionContext from '../../helper/PredictionContext';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  NumberInput,\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { useWallet } from '../../helper/WalletContext';\r\nimport Loading from '../../helper/Loading';\r\nimport { CONTRACT_ADDRESS, wallet, Tezos, TOKEN_ADDRESS } from '../../helper/tezos';\r\n\r\nconst AddPredRes = ({ pred }) => {\r\n  const colors = {\r\n    bg: useColorModeValue('blue.200', 'blue.700'),\r\n    text: useColorModeValue('blue', 'white'),\r\n  };\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { option } = e.target.elements;\r\n    console.log(option.value);\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n    const result = await contract.methods.predictResults(pred.predictionRef, option.value).send();\r\n\tawait result.confirmation(1);\r\n    alert(\"Result Updated!\");  \r\n  };\r\n\r\n  return (\r\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\r\n      <PopoverTrigger>\r\n        <Button bg={colors.bg} textColor={colors.text} marginLeft=\"10px\">\r\n          Result\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent textColor={colors.text}>\r\n        <PopoverHeader fontWeight=\"semibold\">\r\n          Update Prediction Result\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n          <form onSubmit={submit}>\r\n            <FormControl>\r\n              <FormLabel htmlFor={pred.id + '_status'}>Options</FormLabel>\r\n              <RadioGroup name=\"option\">\r\n                <Stack direction=\"column\">\r\n                  {pred.predictionOptions.map((option, i) => {\r\n                    return (\r\n                      <Radio key={i} value={option}>\r\n                        <Box\r\n                          borderWidth=\"1px\"\r\n                          borderColor=\"purple.400\"\r\n                          p=\"2\"\r\n                          borderRadius=\"2xl\"\r\n                        >\r\n                          {option}\r\n                        </Box>\r\n                      </Radio>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <Button type=\"submit\">Submit</Button>\r\n          </form>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst UpdatePredStatus = ({ pred }) => {\r\n  const colors = {\r\n    bg: useColorModeValue('blue.200', 'blue.700'),\r\n    text: useColorModeValue('blue', 'white'),\r\n\t\r\n  };\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { status } = e.target.elements;\r\n\t\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n    const st = await contract.methods.updateStatus(pred.predictionRef, status.value).send();\r\n\tst.confirmation();\r\n\talert(\"Status Updated!\"); \r\n  };\r\n  return (\r\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\r\n      <PopoverTrigger>\r\n        <Button bg={colors.bg} textColor={colors.text}>\r\n          Update\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent textColor={colors.text}>\r\n        <PopoverHeader fontWeight=\"semibold\">\r\n          Update Prediction Status\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n          <form onSubmit={submit}>\r\n            <FormControl>\r\n              <FormLabel htmlFor={pred.id + '_status'}>Status</FormLabel>\r\n              <RadioGroup name=\"status\">\r\n                <Stack direction=\"column\">\r\n                  {[\r\n                    'Prediction In-Progress',\r\n                    'Prediction Ended',\r\n                    'Result Declared',\r\n\t\t\t\t\t'Cancelled',\r\n                  ].map((option, i) => {\r\n                    return (\r\n                      <Radio key={i} value={option}>\r\n                        <Box\r\n                          borderWidth=\"1px\"\r\n                          borderColor=\"purple.400\"\r\n                          p=\"2\"\r\n                          borderRadius=\"2xl\"\r\n                        >\r\n                          {option}\r\n                        </Box>\r\n                      </Radio>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <Button type=\"submit\">Submit</Button>\r\n          </form>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst AddNewPrediction = () => {\r\n  const [num, setNum] = React.useState(0);\r\n  // const { connected, connect, activeAccount } = useWallet();\r\n  const [options, setOptions] = React.useState({});\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { prediction, resultRef, start, end } = e.target.elements;\r\n\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\tconst endValue = new Date(end.value).toISOString();\r\n\tconst startValue = new Date(start.value).toISOString();\r\n\r\n    const op = await contract.methods\r\n      .addprediction(\r\n        endValue,\r\n        resultRef.value,\r\n        prediction.value,\r\n        Object.keys(options).map((key) => options[key]),\r\n        startValue\r\n      )\r\n      .send({amount : 2});\r\n\tawait op.confirmation(1);\r\n    alert(\"Prediction Created!\");\r\n  };\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button>Add New Prediction</Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent padding=\"4\">\r\n        <form onSubmit={submit}>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"prediction\">Prediction</FormLabel>\r\n            <Input name=\"prediction\" id=\"prediction\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"resultRef\">Result Reference</FormLabel>\r\n            <Input name=\"resultRef\" id=\"resultRef\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"start\">Start</FormLabel>\r\n            <Input type=\"datetime-local\" name=\"start\" id=\"start\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"end\">End</FormLabel>\r\n            <Input type=\"datetime-local\" name=\"end\" id=\"end\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"number_options\">Number of Options</FormLabel>\r\n            <Input\r\n              onChange={(e) => {\r\n                console.log(e);\r\n                setNum(parseInt(e.target.value) || 0);\r\n              }}\r\n              name=\"number_options\"\r\n              id=\"number_options\"\r\n              type=\"number\"\r\n            ></Input>\r\n          </FormControl>\r\n          {[...Array(num).keys()].map((i) => {\r\n            return (\r\n              <FormControl>\r\n                <FormLabel htmlFor={'option_' + i}>Option {i}</FormLabel>\r\n                <Input\r\n                  onChange={(e) =>\r\n                    setOptions((options) => {\r\n                      var opt = options;\r\n                      opt[`option_${i}`] = e.target.value;\r\n                      return opt;\r\n                    })\r\n                  }\r\n                  name={`option_${i}`}\r\n                  id={`option_${i}`}\r\n                ></Input>\r\n              </FormControl>\r\n            );\r\n          })}\r\n          <Button type=\"submit\">Submit</Button>\r\n        </form>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nexport default function MyPreds() {\r\n  const { predictionsArray } = React.useContext(PredictionContext);\r\n  const { connected, connect, activeAccount } = useWallet();\r\n  const [myPreds, setMyPreds] = React.useState([]);\r\n  const colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n  };\r\n\r\n  \r\n\r\n  React.useEffect(() => {\r\n    (async function () {\r\n      if (!connected) {\r\n        await connect();\r\n      }\r\n\t    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\t\tconst storage = await contract.storage();\r\n\t\tconst admin = storage.admin;\r\n\t\tconsole.log(admin);\r\n      if (activeAccount) {\r\n\r\n        const _ = []; \r\n\t\tfor ( let x = 0 ; x < predictionsArray.length ; x++) {\r\n\t\t\t  \r\n\t\t\t  let item = predictionsArray[x].value;\r\n\t\t\t if (item.proposer === activeAccount.address || admin === activeAccount.address) {\r\n\t\t\t\t_.push(item);\r\n\t\t\t\t\r\n\t\t\t }\r\n\t\t}\r\n        console.log(_);\r\n        setMyPreds(_);\r\n      }\r\n    })();\r\n  }, [activeAccount]);\r\n\r\n  return myPreds ? (\r\n    <Container\r\n      width=\"auto\"\r\n      maxWidth=\"100vw\"\r\n      bg={colors.bg}\r\n      height=\"auto\"\r\n      maxHeight=\"100vh\"\r\n      padding=\"10vh\"\r\n    >\r\n      <AddNewPrediction />\r\n      <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n        {myPreds.map((pred, i) => {\r\n          return (\r\n            <Box\r\n              key={i}\r\n              // onClick={}\r\n              display=\"flex\"\r\n              maxWidth=\"300px\"\r\n              border=\"1px solid\"\r\n              borderRadius=\"15px\"\r\n              padding=\"20px\"\r\n              margin=\"10px\"\r\n            >\r\n              <Text color={colors.text}>{pred.predictionName}</Text>\r\n              <UpdatePredStatus pred={pred} />\r\n              <AddPredRes pred={pred} />\r\n            </Box>\r\n          );\r\n        })}\r\n      </Box>\r\n\t \r\n    </Container>\r\n\r\n  ) : (\r\n    <Loading />\r\n  );\r\n}\r\n\r\nconst Portfolio = () => {\r\n\t//const { isOpen, onOpen, onClose } = useDisclosure();\r\n\tconst colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n\t\r\n  };\r\n\tconst { connect, disconnect, activeAccount, connected } = useWallet();\r\n\tconst [data, setData] = React.useState(null);\r\n\tlet ledger = [];\r\n\tReact.useEffect( async () => {\r\n\t\tif (!connected) {\r\n\t\t\tawait connect();\r\n\t\t}\r\n\t\tif (activeAccount) {\r\n\t\t\tconsole.log(activeAccount);\r\n\t\t\tconsole.log(activeAccount.address);\r\n\t\t\tconst tokenContract =await Tezos.contract.at(TOKEN_ADDRESS);\r\n\t\t\tconst tokenStore = await tokenContract.storage();\r\n\t\t\tconst tokenLedger = tokenStore.ledger;\r\n\t\t\tconsole.log(tokenLedger);\r\n\t\t\tlet tokens = tokenStore.all_tokens.toString().split(',').map(Number);\r\n\t\t\tconsole.log(tokens);\r\n\t\t\t\r\n\t\t\tfor (let tokenId = tokens.length-1 ; tokenId>=0; tokenId--) {\t\r\n\t\t\t\tconsole.log(tokenId,tokens[tokenId]);\r\n\t\t\t\tawait tokenLedger.get([activeAccount.address, tokens[tokenId]])\r\n\t\t\t\t\t.then(value => { ledger.push({id:tokens[tokenId], balance: value.toString()})})\r\n\t\t\t\t\t.catch(error => console.log(`Error: ${tokens[tokenId]} ${activeAccount.address}`));\r\n\t\t\t\tconsole.log(ledger)\r\n\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tsetData(ledger);\r\n\t\t};\r\n\t\r\n\t},[activeAccount]);\r\n\treturn data ?(\r\n\t<Container\r\n      width=\"auto\"\r\n      maxWidth=\"100vw\"\r\n      bg={colors.bg}\r\n      height=\"auto\"\r\n      maxHeight=\"100vh\"\r\n      padding=\"10vh\"\r\n    >\r\n\t\r\n\t\t\t<Text color={colors.text}>Portfolio</Text>\r\n      \t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\r\n\t\t\t\t{data.map((pred, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t    \t\t\t// onClick={}\r\n\t\t\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\t\t\tmaxWidth=\"300px\"\r\n\t\t\t\t\t\t\tflexDirection=\"row\"\r\n\t\t\t\t\t\t\tborder=\"1px solid\"\r\n\t\t\t\t\t\t\tborderRadius=\"15px\"\r\n\t\t\t\t\t\t\tpadding=\"20px\"\r\n\t\t\t\t\t\t\tmargin=\"10px\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Token id &nbsp;: &nbsp; {pred.id} &nbsp;</Text>\r\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Balance &nbsp; :&nbsp; {pred.balance}</Text>\r\n\t\t\t\t\t\t</Box>\r\n\t\t            );\r\n                })}\r\n\t\t\t</Box>\r\n\t\t  </Container>\r\n \r\n  ):(\r\n    <Loading />\r\n  );\r\n};\r\n\t\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport './Portfolio.css';\r\nimport { useWallet } from '../../helper/WalletContext';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Text,\r\n  Center,\r\n  useColorModeValue,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  Heading,\r\n  Image,\r\n  Button,\r\n  Select,\r\n} from '@chakra-ui/react';\r\n\r\nconst Portfolio = () => {\r\n  return (\r\n    <Container\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      height=\"90vh\"\r\n    >\r\n      <Button color={'black'}>Connect Wallet</Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Portfolio;\r\n","import React from 'react';\r\nimport { BrowserRouter, Routes, Route, useParams } from 'react-router-dom';\r\nimport { ChakraProvider, ColorModeProvider } from '@chakra-ui/react';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport Predict from './components/Predict';\r\nimport './App.css';\r\nimport Home from './components/Home';\r\nimport { ContractProvider, CONTRACT_ADDRESS } from './helper/tezos';\r\nimport PredictionContext from './helper/PredictionContext';\r\nimport Loading from './helper/Loading';\r\nimport MyPreds from './components/Mypreds';\r\nimport Portfolio from './page/Portfolio/Portfolio';\r\n\r\nfunction App() {\r\n  const [predictions, setPredictions] = React.useState(null);\r\n  const [predictionsArray, setPredictionsArray] = React.useState([]);\r\n  const updatePredictions = (preds, predArray) => {\r\n    setPredictions(preds);\r\n    setPredictionsArray(predArray);\r\n  };\r\n  const { id } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    ContractProvider.at(CONTRACT_ADDRESS).then(async (contract) => {\r\n      const storage = await contract.storage();\r\n      const predictions = storage.predictions;\r\n      const counter = storage.Id;\r\n      const predList = [];\r\n      // for (let key of storage.predictTokenDetails.keys()) {\r\n      //   console.log(key);\r\n      //   console.log(storage.predictTokenDetails.get(key));\r\n      // }\r\n      for (let pred = 10; pred < counter; pred++) {\r\n        await predictions.get(pred).then((value) => {\r\n          predList.push({ id: pred, value });\r\n        });\r\n      }\r\n      updatePredictions(predictions, predList);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <ColorModeProvider\r\n        options={{\r\n          initialColorMode: 'dark',\r\n          useSystemColorMode: true,\r\n        }}\r\n      >\r\n        {predictions ? (\r\n          <>\r\n            <PredictionContext.Provider\r\n              value={{\r\n                predictions,\r\n                predictionsArray,\r\n                updatePredictions,\r\n              }}\r\n            >\r\n              <BrowserRouter>\r\n                <Header />\r\n                <Routes>\r\n                  <Route exact path=\"/\" element={<Home />} />\r\n\r\n                  <Route path=\"/predict/:id\" element={<Predict />} />\r\n\r\n                  <Route path=\"/mypreds\" element={<MyPreds />} />\r\n                  <Route path=\"/Portfolio\" element={<Portfolio />} />\r\n                  <Route path=\"/Privacy\" element={<Portfolio />} />\r\n                </Routes>\r\n              </BrowserRouter>\r\n            </PredictionContext.Provider>\r\n          </>\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </ColorModeProvider>\r\n      <Footer />\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ColorModeScript } from '@chakra-ui/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript initialColorMode=\"dark\" />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}