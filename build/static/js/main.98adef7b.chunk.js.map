{"version":3,"sources":["helper/tezos.js","helper/WalletContext.js","helper/Loading.js","components/Header.js","helper/PredictionContext.js","components/Predict/index.js","components/Home/index.js","components/Mypreds/index.js","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_ADDRESS","TOKEN_ADDRESS","Tezos","TezosToolkit","setPackerProvider","MichelCodecPacker","ContractProvider","contract","beaconWallet","BeaconWallet","name","preferredNetwork","setWalletProvider","wallet","useWallet","React","useState","activeAccount","setActiveAccount","connected","setConnected","useEffect","client","getActiveAccount","then","acc","connect","a","requestPermissions","network","type","rpcUrl","req","accountInfo","disconnect","clearActiveAccount","Loading","display","flexDirection","minHeight","height","justifyContent","alignItems","size","Redeem","useDisclosure","isOpen","onOpen","onClose","submit","e","preventDefault","target","elements","tokenId","amount","console","log","value","at","methods","redeemTokens","parseInt","send","op","confirmation","alert","onClick","onSubmit","required","placeholder","Header","links","history","useNavigate","useColorMode","colorMode","toggleColorMode","whiteListProposer","addProposers","address","op1","color","useColorModeValue","bg","px","h","icon","md","spacing","fontSize","colorScheme","fontWeight","marginRight","base","as","Button","cursor","minW","maxW","overflow","whiteSpace","textOverflow","pb","Portfolio","colors","text","data","setData","ledger","tokenContract","storage","tokenStore","tokenLedger","tokens","all_tokens","toString","split","map","Number","get","push","id","balance","catch","error","length","flexWrap","pred","i","maxWidth","border","borderRadius","padding","margin","tokenID","Redeem1","returnFocusOnClose","placement","closeOnBlur","textColor","htmlFor","PredictionContext","createContext","predictions","predictionsArray","updatePredictions","BuySellWindow","options","option","quantity","request","setRequest","buySubmit","voteOnprediction","parseFloat","variant","width","onChange","direction","borderWidth","borderColor","p","isRequired","Predict","useParams","useContext","cardBg","_","predictionVoteSnapshot","snapshot","snapshotList","keys","Math","round","volume","prediction","predictionName","lastDate","Date","endTime","toLocaleDateString","toLocaleTimeString","key","ref","predictionRef","result","predictionVoteResult","pstatus","predictionStatus","predictionOptions","snap","Volume","disclosure","minH","flexDir","allowToggle","flex","Home","inProgressArray","filter","completedArray","maxHeight","href","AddPredRes","predictResults","marginLeft","UpdatePredStatus","status","updateStatus","AddNewPrediction","num","setNum","setOptions","resultRef","start","end","endValue","toISOString","startValue","addprediction","Object","Array","opt","MyPreds","myPreds","setMyPreds","admin","x","item","proposer","App","setPredictions","setPredictionsArray","preds","predArray","counter","Id","predList","initialColorMode","useSystemColorMode","Provider","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98adef7b.chunk.js","sourcesContent":["import { NetworkType } from '@airgap/beacon-sdk';\r\nimport { BeaconWallet } from '@taquito/beacon-wallet';\r\nimport { TezosToolkit, MichelCodecPacker, compose } from '@taquito/taquito';\r\n//import { Tzip12Module, tzip12 } from \"@taquito/tzip12\";\r\n//import { Tzip16Module, tzip16, bytes2Char } from \"@taquito/tzip16\";\r\n\r\n//const CONTRACT_ADDRESS = 'KT1BavDyS4Qkv2xeRTzy5mf37oJcmHTSgtHR';\r\n//const TOKEN_ADDRESS = 'KT19Spcv2j1ktJd5EBTkg4XbnaEeRD1tWmhW';\r\n//const CONTRACT_ADDRESS = 'KT1DwGe6b1x3iqCGMgrFykasxEErt986Rgox';\r\n//const TOKEN_ADDRESS = 'KT1BvYkPGPau7xDSRxLVz7DQpuWZfrXBLL27';\r\n\r\nconst CONTRACT_ADDRESS = 'KT1QM2Drh18w6fnU13fwxBCDAToWjKfcgZm5'; //-- Mainnet \r\nconst TOKEN_ADDRESS = 'KT1U8jQyUkwsYVpgogrjSAKyQXi8kWengpzp';\r\n\r\n//const Tezos = new TezosToolkit('https://hangzhounet.smartpy.io');\r\n//const Tezos = new TezosToolkit('https://ithacanet.smartpy.io');\r\n//const Tezos = new TezosToolkit('https://mainnet.smartpy.io');\r\nconst Tezos = new TezosToolkit('https://mainnet.api.tez.ie');\r\nTezos.setPackerProvider(new MichelCodecPacker());\r\n\r\nconst ContractProvider = Tezos.contract;\r\n\r\nconst beaconWallet = new BeaconWallet({\r\n  name: 'Predictor',\r\n  preferredNetwork: \"mainnet\"\r\n});\r\n\r\nTezos.setWalletProvider(beaconWallet);\r\n\r\nconst wallet = Tezos.wallet;\r\n\r\nexport { CONTRACT_ADDRESS,TOKEN_ADDRESS, Tezos, ContractProvider, wallet, beaconWallet };\r\n","import { NetworkType, Network , DAppClient} from '@airgap/beacon-sdk';\r\nimport React from 'react';\r\nimport { beaconWallet } from './tezos';\r\n\r\nconst useWallet = () => {\r\n  const [activeAccount, setActiveAccount] = React.useState(null);\r\n  const [connected, setConnected] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    beaconWallet.client.getActiveAccount().then((acc) => {\r\n      if (acc) {\r\n        setActiveAccount(acc);\r\n        setConnected(true);\r\n      }\r\n    });\r\n  }, [activeAccount]);\r\n\r\n  const connect = async () => {\r\n    const currAcc = await beaconWallet.client.getActiveAccount();\r\n    if (!currAcc) {\r\n      const req = await beaconWallet.client.requestPermissions({\r\n        network: {\r\n          type: 'mainnet',\r\n\t  rpcUrl: 'https://mainnet.api.tez.ie'\r\n        },\r\n      });\r\n      if (req) {\r\n        setActiveAccount(req.accountInfo);\r\n        setConnected(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const disconnect = () => {\r\n    beaconWallet.client.clearActiveAccount();\r\n    setConnected(false);\r\n  };\r\n\r\n  return { connect, disconnect, activeAccount, connected };\r\n};\r\n\r\nexport { useWallet };\r\n","import { Box } from '@chakra-ui/layout';\r\nimport { Spinner } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      flexDirection=\"row\"\r\n      minHeight=\"100vh\"\r\n      height=\"100%\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Spinner size=\"lg\" />\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  HStack,\r\n  Container,\r\n  IconButton,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useDisclosure,\r\n  useColorModeValue,\r\n  Stack,\r\n  useColorMode,\r\n  Text,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Input,\r\n} from '@chakra-ui/react';\r\nimport { HamburgerIcon, CloseIcon, SunIcon, MoonIcon } from '@chakra-ui/icons';\r\nimport { useWallet } from '../helper/WalletContext';\r\nimport { CONTRACT_ADDRESS, TOKEN_ADDRESS, wallet,Tezos } from '../helper/tezos';\r\nimport { TezosToolkit, MichelCodecPacker, compose } from '@taquito/taquito';\r\nimport Loading from '../helper/Loading';\r\n\r\n\r\n\r\nconst Redeem = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { tokenId, amount } = e.target.elements;\r\n    console.log(tokenId.value, amount.value);\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\r\n    const op = await contract.methods\r\n      .redeemTokens(parseInt(amount.value), parseInt(tokenId.value))\r\n      .send();\r\n\tawait op.confirmation(1);\r\n    alert(\"Redemption Completed!\");  \r\n\t\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MenuItem onClick={onOpen}>Redeem</MenuItem>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Redeem Token</ModalHeader>\r\n          <ModalBody>\r\n            <form onSubmit={submit}>\r\n              <FormControl>\r\n                <Input\r\n                  required\r\n                  type=\"number\"\r\n                  name=\"tokenId\"\r\n                  placeholder=\"Token ID\"\r\n                ></Input>\r\n              </FormControl>\r\n              <FormControl>\r\n                <Input\r\n                  required\r\n                  type=\"number\"\r\n                  name=\"amount\"\r\n                  placeholder=\"Amount\"\r\n                />\r\n              </FormControl>\r\n              <Button type=\"submit\">Redeem</Button>\r\n            </form>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function Header({ links = [] }) {\r\n  const history = useNavigate();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { connect, disconnect, activeAccount, connected } = useWallet();\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const whiteListProposer = async () => {\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n    const op1 = await contract.methods.addProposers(activeAccount.address).send();\r\n\t\r\n\tawait op1.confirmation(1);\r\n    alert(\"Proposer Whitelisted!\");  \r\n  };  \r\n\r\n  return (\r\n    <Box\r\n      color={useColorModeValue('purple', 'white')}\r\n      bg={useColorModeValue('purple.100', 'purple.900')}\r\n      px={4}\r\n    >\r\n      <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>\r\n        <IconButton\r\n          size={'md'}\r\n          icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\r\n          aria-label={'Open Menu'}\r\n          display={{ md: 'none' }}\r\n          onClick={isOpen ? onClose : onOpen}\r\n        />\r\n\r\n        <HStack spacing={8} alignItems={'center'}>\r\n          <Box></Box>\r\n        </HStack>\r\n        <Text fontSize=\"3xl\" colorScheme=\"blue\" fontWeight=\"bold\">\r\n          Predictor\r\n        </Text>\r\n\r\n        <Flex alignItems={'center'}>\r\n          <IconButton\r\n            marginRight=\"10px\"\r\n            icon={colorMode === 'dark' ? <SunIcon /> : <MoonIcon />}\r\n            onClick={toggleColorMode}\r\n          />\r\n          <Box display={{ base: 'none', md: 'flex' }}>\r\n            {!connected ? (\r\n              <Button onClick={connect}>Connect Wallet</Button>\r\n            ) : (\r\n              <Menu>\r\n                <MenuButton as={Button} cursor={'pointer'} minW={0}>\r\n                  <Text\r\n                    maxW=\"300px\"\r\n                    overflow=\"hidden\"\r\n                    whiteSpace=\"nowrap\"\r\n                    textOverflow=\"ellipsis\"\r\n                  >\r\n                    {activeAccount?.address}\r\n                  </Text>\r\n                </MenuButton>\r\n                <MenuList>\r\n                  <MenuItem onClick={() => history('/mypreds')}>\r\n                    My Predictions\r\n                  </MenuItem>\r\n                  <MenuItem onClick={whiteListProposer}>Whitelist Me</MenuItem>\r\n                  <MenuItem onClick={disconnect}>Disconnect</MenuItem>\r\n\t\t\t\t  <Portfolio />\r\n                  <Redeem />\r\n                </MenuList>\r\n              </Menu>\r\n            )}\r\n          </Box>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      {isOpen ? (\r\n        <Box pb={4} display={{ md: 'none' }}>\r\n          <Stack as={'nav'} spacing={4}>\r\n            {!connected ? (\r\n              <Button onClick={connect}>Connect Wallet</Button>\r\n            ) : (\r\n              <Menu>\r\n                <MenuButton as={Button} cursor={'pointer'} minW={0}>\r\n                  <Text\r\n                    maxW=\"300px\"\r\n                    overflow=\"hidden\"\r\n                    whiteSpace=\"nowrap\"\r\n                    textOverflow=\"ellipsis\"\r\n                  >\r\n                    {activeAccount?.address}\r\n                  </Text>\r\n                </MenuButton>\r\n                <MenuList>\r\n                  <MenuItem onClick={() => history('/mypreds')}>\r\n                    My Predictions\r\n                  </MenuItem>\r\n                  <MenuItem onClick={disconnect}>Disconnect</MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            )}\r\n          </Stack>\r\n        </Box>\r\n      ) : null}\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\nconst Portfolio = () => {\r\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\r\n\tconst colors = {\r\n    bg: useColorModeValue('purple.100', 'purple.700'),\r\n    text: useColorModeValue('blue', 'white'),\r\n\t\r\n  };\r\n\tconst { connect, disconnect, activeAccount, connected } = useWallet();\r\n\tconst [data, setData] = React.useState(null);\r\n\tlet ledger = [];\r\n\tReact.useEffect( async () => {\r\n\t\tif (!connected) {\r\n\t\t\tawait connect();\r\n\t\t}\r\n\t\tif (activeAccount) {\r\n\t\t\tconsole.log(activeAccount);\r\n\t\t\tconsole.log(activeAccount.address);\r\n\t\t\tconst tokenContract =await Tezos.contract.at(TOKEN_ADDRESS);\r\n\t\t\tconst tokenStore = await tokenContract.storage();\r\n\t\t\tconst tokenLedger = tokenStore.ledger;\r\n\t\t\tconsole.log(tokenLedger);\r\n\t\t\tlet tokens = tokenStore.all_tokens.toString().split(',').map(Number);\r\n\t\t\tconsole.log(tokens);\r\n\t\t\t\r\n\t\t\tfor (let tokenId = tokens.length-1 ; tokenId>=0; tokenId--) {\t\r\n\t\t\t\tconsole.log(tokenId,tokens[tokenId]);\r\n\t\t\t\tawait tokenLedger.get([activeAccount.address, tokens[tokenId]])\r\n\t\t\t\t\t.then(value => { if(value > 0) {ledger.push({id:tokens[tokenId], balance: value.toString()})}})\r\n\t\t\t\t\t.catch(error => console.log(`Error: ${tokens[tokenId]} ${activeAccount.address}`));\r\n\t\t\t\tconsole.log(ledger)\r\n\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tsetData(ledger);\r\n\t\t};\r\n\t\r\n\t},[activeAccount]);\r\n\treturn data ?(\r\n\t<>\r\n      <MenuItem onClick={onOpen}>Portfolio</MenuItem>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Portfolio Details</ModalHeader>\r\n          <ModalBody>\r\n\t\r\n\t\t\t<Text color={colors.text}> <b> Portfolio </b> </Text>\r\n\t\t\t\r\n      \t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\r\n\t\t\t\t{data.map((pred, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t    \t\t\t//onClick={}\r\n\t\t\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\t\t\tmaxWidth=\"400px\"\r\n\t\t\t\t\t\t\tflexDirection=\"row\"\r\n\t\t\t\t\t\t\tborder=\"0px solid\"\r\n\t\t\t\t\t\t\tborderRadius=\"15px\"\r\n\t\t\t\t\t\t\tpadding=\"5px\"\r\n\t\t\t\t\t\t\tmargin=\"5px\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Token id &nbsp;: &nbsp; {pred.id} &nbsp; |&nbsp;</Text>\r\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Balance &nbsp; : &nbsp; {pred.balance}&emsp;</Text>\r\n\t\t\t\t\t\t\t\t<Redeem1 tokenID={pred.id} />\r\n\t\t\t\t\t\t</Box>\r\n\t\t            );\r\n                })}\r\n\t\t\t</Box>\r\n\t\t\t</ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n \r\n  ):(\r\n    <Loading />\r\n  );\r\n};\r\n\r\nconst Redeem1 = (tokenID) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\tconsole.log(\"tokenId\", tokenID.tokenID.toString());\r\n\tconst colors = {\r\n    bg: useColorModeValue('purple.300', 'purple.600'),\r\n    text: useColorModeValue('purple', 'white'),}\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { amount } = e.target.elements;\r\n    console.log(tokenID.tokenID, amount.value);\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\r\n    await contract.methods\r\n      .redeemTokens(amount.value, tokenID.tokenID)\r\n      .send();\r\n  };\r\n\r\n  return (\r\n     \r\n      <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\r\n      <PopoverTrigger>\r\n        <Button bg={colors.bg} textColor={colors.text}>\r\n          Redeem\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent textColor={colors.text}>\r\n        <PopoverHeader fontWeight=\"semibold\">\r\n          Redeem Token\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n            <form onSubmit={submit}>\r\n             <FormControl>\r\n            <FormLabel htmlFor=\"tokenID\">Token Id : {tokenID.tokenID.toString()} </FormLabel>\r\n            \r\n          </FormControl>\r\n              <FormControl>\r\n                <Input\r\n                  required\r\n                  type=\"number\"\r\n                  name=\"amount\"\r\n                  placeholder=\"Amount\"\r\n                />\r\n              </FormControl>\r\n              <Button type=\"submit\">Redeem</Button>\r\n            </form>\r\n       </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  \r\n  );\r\n};\r\n\r\n\t\r\n\t","import React from 'react';\r\n\r\nconst PredictionContext = React.createContext({\r\n  predictions: {},\r\n  predictionsArray: [],\r\n  updatePredictions: () => {},\r\n});\r\n\r\nexport default PredictionContext;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  useColorModeValue,\r\n  Text,\r\n  Tabs,\r\n  TabList,\r\n  Tab,\r\n  TabPanels,\r\n  TabPanel,\r\n  Button,\r\n  RadioGroup,\r\n  Stack,\r\n  Radio,\r\n  NumberInput,\r\n  NumberInputField,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n} from '@chakra-ui/react';\r\nimport PredictionContext from '../../helper/PredictionContext';\r\nimport { useParams  } from 'react-router-dom';\r\nimport Loading from '../../helper/Loading';\r\nimport { CONTRACT_ADDRESS, wallet } from '../../helper/tezos';\r\n\r\nconst BuySellWindow = ({ id, options }) => {\r\n  const [request, setRequest] = React.useState({\r\n    option: options[0],\r\n    quantity: 0,\r\n  });\r\n\r\n  const buySubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { option, quantity } = e.target.elements;\r\n\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\tid = Number(id);\r\n\r\n    const op = await contract.methods\r\n      .voteOnprediction(id, option.value)\r\n      .send({\r\n        amount: parseFloat(quantity.value / 100) ,\r\n      })\r\n      \r\n\tawait op.confirmation(1);\r\n    alert(\"Transaction Completed!\");  \r\n  };\r\n\r\n  return (\r\n    <Tabs variant=\"soft-rounded\" width=\"100%\">\r\n      <TabList>\r\n        <Tab>Options</Tab>\r\n      </TabList>\r\n      <TabPanels>\r\n        <TabPanel>\r\n          <form onSubmit={buySubmit}>\r\n            <Container\r\n              padding={{ base: '0' }}\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n            >\r\n              <Box margin=\"3\">\r\n                <Text fontWeight=\"bold\" fontSize=\"md\">\r\n                  Pick an option\r\n                </Text>\r\n                <RadioGroup\r\n                  onChange={(e) =>\r\n                    setRequest((request) => {\r\n                      return {\r\n                        ...request,\r\n                        option: e,\r\n                      };\r\n                    })\r\n                  }\r\n                  value={request.option}\r\n                  name=\"option\"\r\n                >\r\n                  <Stack direction=\"column\">\r\n                    {options.map((option, i) => {\r\n                      return (\r\n                        <Radio key={i} value={option}>\r\n                          <Box\r\n                            borderWidth=\"1px\"\r\n                            borderColor=\"gray.400\"\r\n                            p=\"2\"\r\n                            borderRadius=\"2xl\"\r\n                          >\r\n                            {option}\r\n                          </Box>\r\n                        </Radio>\r\n                      );\r\n                    })}\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Box>\r\n              <Box margin=\"3\">\r\n                <Text fontWeight=\"bold\" fontSize=\"lg\">\r\n                  Amount of shares\r\n                </Text>\r\n                <NumberInput\r\n                  isRequired\r\n                  placeholder=\"Shares\"\r\n                  onChange={(e) =>\r\n                    setRequest((request) => {\r\n                      return {\r\n                        ...request,\r\n                        quantity: e,\r\n                      };\r\n                    })\r\n                  }\r\n                  value={request.quantity}\r\n                  name=\"quantity\"\r\n                >\r\n                  <NumberInputField />\r\n                </NumberInput>\r\n              </Box>\r\n              <Box margin=\"3\">\r\n                <Button type=\"submit\">Buy</Button>\r\n              </Box>\r\n            </Container>\r\n          </form>\r\n        </TabPanel>\r\n        <TabPanel>Lol2</TabPanel>\r\n      </TabPanels>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\n\r\nexport default function Predict() {\r\n  \r\n  let { id } = useParams();\r\n  console.log( \"ID \", id);\r\n  id = id.toString();\r\n  const { predictions } = React.useContext(PredictionContext);\r\n  const [data, setData] = React.useState(null);\r\n  const colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n    border: useColorModeValue('purple.900', 'purple.100'),\r\n    cardBg: useColorModeValue('blue.200', 'blue.700'),\r\n  };\r\n\r\n  React.useEffect(async () => {\r\n    const _ = await predictions.get(id).then(value => {return value});\r\n\tconst contract = await wallet.at(CONTRACT_ADDRESS);\r\n\t\tconst storage = await contract.storage();\r\n\t\tconst snapshot = await storage.predictionVoteSnapshot.get(id).then(value => {return value});\r\n\t\tconst snapshotList = [];\r\n\t\t\r\n\t\tfor (let pred of snapshot.keys()) {\r\n\t\t\tif (pred != 'Total') {\t\t\t  \r\n\t\t  snapshotList.push({ id: pred, value: (Math.round(snapshot.get(pred) * 100 / snapshot.get('Total'))).toString() }); }\r\n\t\t  \r\n\t\t  console.log(snapshotList);\r\n\t\t  \r\n      }\r\n\t  \r\n\t  let volume = (snapshot.get('Total') / 100).toString();\r\n\t  console.log(\"volume :\", volume);\r\n\r\n\tsetData({\r\n      prediction: _.predictionName,\r\n      lastDate:\r\n        new Date(_.endTime).toLocaleDateString() +\r\n        ' ' +\r\n        new Date(_.endTime).toLocaleTimeString(),\r\n      key: id,\r\n      ref: _.predictionRef,\r\n\t  result: _.predictionVoteResult,\r\n      pstatus: _.predictionStatus,\r\n      options: _.predictionOptions,\r\n\t  snap : snapshotList,\r\n\t  Volume : volume,\r\n\r\n      disclosure:\r\n        \"Predictor is for informational and educational purposes only. We take no custody of anyone's money or cryptocurrency. Predictor displays existing markets live on the Tezos blockchain and is a graphical user interface for both visualizing data and market trends from on-chain activity, and interacting with said smart contracts directly via your Web 3 enabled wallet.\",\r\n    });\r\n  }, []);\r\n\r\n  return data ? (\r\n    <Container\r\n      maxWidth=\"100vw\"\r\n      width=\"auto\"\r\n      bg={colors.bg}\r\n      color={colors.text}\r\n      height=\"auto\"\r\n      minH=\"92vh\"\r\n      display=\"flex\"\r\n      flexDir=\"column\"\r\n      justifyContent=\"center\"\r\n      padding=\"0 15% 0 15%\"\r\n    >\r\n      <Accordion allowToggle margin=\"6\">\r\n        <AccordionItem>\r\n          <h2>\r\n            <AccordionButton>\r\n              <Box flex=\"1\">Please Read this before making any purchases</Box>\r\n            </AccordionButton>\r\n          </h2>\r\n          <AccordionPanel p=\"6\">{data.disclosure}</AccordionPanel>\r\n        </AccordionItem>\r\n      </Accordion>\r\n      <Box\r\n        p=\"6\"\r\n        maxW=\"max-content\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        borderColor={colors.border}\r\n        overflow=\"hidden\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <Text fontSize=\"sm\">Prediction id: {data.ref} </Text>\r\n\r\n        <Text\r\n          fontSize=\"lg\"\r\n          fontWeight=\"bold\"\r\n          margin={{ base: '1', md: '1' }}\r\n          maxWidth=\"lg\"\r\n          overflow=\"visible\"\r\n          textOverflow=\"clip\"\r\n        >\r\n          {data.prediction}\r\n        </Text>\r\n      </Box>\r\n      <Box\r\n        p=\"3\"\r\n        maxW=\"max-content\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        borderColor={colors.border}\r\n        overflow=\"hidden\"\r\n        display=\"flex\"\r\n        flexDirection=\"row\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <Box\r\n          p=\"2\"\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          borderColor={colors.border}\r\n          bg={colors.cardBg}\r\n          overflow=\"hidden\"\r\n          display=\"flex\"\r\n          flexDir=\"column\"\r\n          margin={{ base: '0', md: '2' }}\r\n        >\r\n          <Text fontSize=\"sm\">Open Till</Text>\r\n          <Text fontSize=\"l\">{data.lastDate}</Text>\r\n        </Box>\r\n        <Box\r\n          p=\"2\"\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          borderColor={colors.border}\r\n          bg={colors.cardBg}\r\n          overflow=\"hidden\"\r\n          display=\"flex\"\r\n          flexDir=\"column\"\r\n          margin={{ base: '0', md: '2' }}\r\n        >\r\n          <Text fontSize=\"sm\">Status</Text>\r\n          <Text fontSize=\"l\">{data.pstatus}</Text>\r\n        </Box>\r\n\t\t<Box\r\n          p=\"2\"\r\n          maxW=\"sm\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          borderColor={colors.border}\r\n          bg={colors.cardBg}\r\n          overflow=\"hidden\"\r\n          display=\"flex\"\r\n          flexDir=\"column\"\r\n          margin={{ base: '0', md: '2' }}\r\n        >\r\n          <Text fontSize=\"sm\">Result</Text>\r\n          <Text fontSize=\"l\">{data.result}</Text>\r\n        </Box>\r\n\r\n      </Box>\r\n\t  <Text fontSize=\"sm\">Volume :</Text>\r\n         <Box p=\"2\"\r\n\t\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\tborderColor={colors.border}\r\n\r\n\t\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\tflexDir=\"row\" flexWrap=\"wrap\">\r\n\t\t\t\t\t\r\n\t\t  <Box p=\"2\"\r\n\t\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\tborderColor={colors.border}\r\n\t\t\t\t\tbg={colors.cardBg}\r\n\t\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\tflexDir=\"row\"\r\n\t\t\t\t\tmargin={{ base: '0', md: '1' }}>\r\n\t\t  <Text color={colors.text}>Total : &nbsp;</Text>\r\n\t\t  <Text color={colors.text}>{data.Volume} Tez</Text>\r\n\t\t  </Box>\r\n\t\t \r\n        {data.snap.map((pred, i) => {\r\n          return (\r\n           \r\n\t\t\t\t<Box p=\"2\"\r\n\t\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\tborderColor={colors.border}\r\n\t\t\t\t\tbg={colors.cardBg}\r\n\t\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\tflexDir=\"row\"\r\n\t\t\t\t\tmargin={{ base: '0', md: '1' }}>\r\n              <Text color={colors.text}>{pred.id} : &nbsp;</Text>\r\n\t\t\t  \r\n\t\t\t  <Text color={colors.text}>{pred.value} %</Text>\r\n\t\t\t  </Box>\r\n   \r\n          );\r\n        })}\r\n      </Box>\r\n\t  <Box\r\n        margin=\"6\"\r\n        p={{ base: '2', md: '6' }}\r\n        maxW=\"max-content\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        borderColor={colors.border}\r\n        overflow=\"hidden\"\r\n        display=\"flex\"\r\n        flexDirection=\"row\"\r\n        flexWrap=\"wrap\"\r\n      >\r\n        <BuySellWindow id={id} options={data.options} />\r\n      </Box>\r\n\r\n    </Container>\r\n  ) : (\r\n    <Loading />\r\n  );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Text,\r\n  useColorModeValue,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n} from '@chakra-ui/react';\r\nimport PredictionContext from '../../helper/PredictionContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Home() {\r\n  const { predictionsArray } = React.useContext(PredictionContext);\r\n  const history = useNavigate();\r\n  const colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n  };\r\n  const inProgressArray = predictionsArray.filter(function (prediction) {\r\n    return prediction.value.predictionStatus == 'Prediction In-Progress';\r\n  });\r\n  const completedArray = predictionsArray.filter(function (prediction) {\r\n    return prediction.value.predictionStatus != 'Prediction In-Progress';\r\n  });\r\n\r\n  return (\r\n    <Container\r\n      width=\"auto\"\r\n      maxWidth=\"100vw\"\r\n      bg={colors.bg}\r\n      height=\"auto\"\r\n      maxHeight=\"1000vh\"\r\n      padding=\"5vh\"\r\n    >\r\n      <Text color={colors.text} text-align=\"center\">\r\n        {' '}\r\n        Join the community on{' '}\r\n        <a href=\"https://t.me/+wcqQOgMRyMBkZDll\" target=\"_blank\">\r\n          {' '}\r\n          <b>telegram</b>\r\n        </a>{' '}\r\n        for any queries.\r\n        <br />{' '}\r\n      </Text>\r\n      <Accordion allowToggle margin=\"6\">\r\n        <AccordionItem>\r\n          <h2>\r\n            <AccordionButton>\r\n              {/* <Box flex=\"1\">\r\n                Read this to get familiar with Predictor Platform.\r\n              </Box> */}\r\n            </AccordionButton>\r\n          </h2>\r\n          <AccordionPanel p=\"6\">\r\n            {' '}\r\n            \"Predictor is for informational and educational purposes only. We\r\n            take no custody of anyone's money or cryptocurrency. <br />\r\n            Read this{' '}\r\n            <a\r\n              href=\"https://medium.com/coinmonks/predictor-da7efb0163ca/\"\r\n              target=\"_blank\"\r\n            >\r\n              {' '}\r\n              <b>article</b>\r\n            </a>{' '}\r\n            to know more about Predictor.\r\n            <br />\r\n            Read this{' '}\r\n            <a\r\n              href=\"https://medium.com/@karthi1908/predictor-c90398056061\"\r\n              target=\"_blank\"\r\n            >\r\n              <b>article</b>\r\n            </a>{' '}\r\n            to get started on Predictor <br />\r\n            Read this{' '}\r\n            <a\r\n              href=\"https://medium.com/@karthi1908/predictor-d01e6c67de0e/\"\r\n              target=\"_blank\"\r\n            >\r\n              {' '}\r\n              <b>article</b>\r\n            </a>{' '}\r\n            to understand how to use predictor to predict events.\r\n            <br />\r\n            Predictor displays existing markets live on the Tezos blockchain and\r\n            is a graphical user interface for both visualizing data and market\r\n            trends from on-chain activity, and interacting with said smart\r\n            contracts directly via your Web 3 enabled wallet.\"\r\n          </AccordionPanel>\r\n        </AccordionItem>\r\n      </Accordion>\r\n\r\n      <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\r\n        <Text color={colors.text}>\r\n          {' '}\r\n          <b>Current Predictions </b>\r\n        </Text>\r\n        <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n          {inProgressArray.map((pred, i) => {\r\n            return (\r\n              <Box\r\n                key={i}\r\n                onClick={() => history('/predict/' + pred.id)}\r\n                display=\"flex\"\r\n                maxWidth=\"200px\"\r\n                border=\"1px solid\"\r\n                borderColor=\"purple.400\"\r\n                borderRadius=\"20px\"\r\n                flexDirection=\"row\"\r\n                padding=\"20px\"\r\n                margin=\"10px\"\r\n              >\r\n                <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\r\n                  <Text color={colors.text}>\r\n                    {' '}\r\n                    <b>ID </b>: {pred.value.predictionRef}\r\n                  </Text>\r\n                  <Text color=\"orange\"> {pred.value.predictionName} </Text>\r\n                  <Text color={colors.text}>\r\n                    <b>Status </b>: {pred.value.predictionStatus}\r\n                  </Text>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Box>\r\n        <Text color={colors.text}>\r\n          {' '}\r\n          <b>Completed Predictions </b>\r\n        </Text>\r\n        <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n          {completedArray.map((pred, i) => {\r\n            return (\r\n              <Box\r\n                key={i}\r\n                onClick={() => history('/predict/' + pred.id)}\r\n                display=\"flex\"\r\n                maxWidth=\"200px\"\r\n                border=\"1px solid\"\r\n                borderColor=\"purple.400\"\r\n                flexDirection=\"row\"\r\n                borderRadius=\"20px\"\r\n                padding=\"20px\"\r\n                margin=\"10px\"\r\n              >\r\n                <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\r\n                  <Text color={colors.text}>\r\n                    {' '}\r\n                    <b>ID </b>: {pred.value.predictionRef}\r\n                  </Text>\r\n                  <Text color=\"orange\"> {pred.value.predictionName} </Text>\r\n                  <Text color={colors.text}>\r\n                    <b>Status </b>: {pred.value.predictionStatus}\r\n                  </Text>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PredictionContext from '../../helper/PredictionContext';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  NumberInput,\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { useWallet } from '../../helper/WalletContext';\r\nimport Loading from '../../helper/Loading';\r\nimport { CONTRACT_ADDRESS, wallet, Tezos, TOKEN_ADDRESS } from '../../helper/tezos';\r\n\r\nconst AddPredRes = ({ pred }) => {\r\n  const colors = {\r\n    bg: useColorModeValue('blue.200', 'blue.700'),\r\n    text: useColorModeValue('blue', 'white'),\r\n  };\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { option } = e.target.elements;\r\n    console.log(option.value);\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n    const result = await contract.methods.predictResults(pred.predictionRef, option.value).send();\r\n\tawait result.confirmation(1);\r\n    alert(\"Result Updated!\");  \r\n  };\r\n\r\n  return (\r\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\r\n      <PopoverTrigger>\r\n        <Button bg={colors.bg} textColor={colors.text} marginLeft=\"10px\">\r\n          Result\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent textColor={colors.text}>\r\n        <PopoverHeader fontWeight=\"semibold\">\r\n          Update Prediction Result\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n          <form onSubmit={submit}>\r\n            <FormControl>\r\n              <FormLabel htmlFor={pred.id + '_status'}>Options</FormLabel>\r\n              <RadioGroup name=\"option\">\r\n                <Stack direction=\"column\">\r\n                  {pred.predictionOptions.map((option, i) => {\r\n                    return (\r\n                      <Radio key={i} value={option}>\r\n                        <Box\r\n                          borderWidth=\"1px\"\r\n                          borderColor=\"purple.400\"\r\n                          p=\"2\"\r\n                          borderRadius=\"2xl\"\r\n                        >\r\n                          {option}\r\n                        </Box>\r\n                      </Radio>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <Button type=\"submit\">Submit</Button>\r\n          </form>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst UpdatePredStatus = ({ pred }) => {\r\n  const colors = {\r\n    bg: useColorModeValue('blue.200', 'blue.700'),\r\n    text: useColorModeValue('blue', 'white'),\r\n\t\r\n  };\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { status } = e.target.elements;\r\n\t\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n    const st = await contract.methods.updateStatus(pred.predictionRef, status.value).send();\r\n\tst.confirmation();\r\n\talert(\"Status Updated!\"); \r\n  };\r\n  return (\r\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\r\n      <PopoverTrigger>\r\n        <Button bg={colors.bg} textColor={colors.text}>\r\n          Update\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent textColor={colors.text}>\r\n        <PopoverHeader fontWeight=\"semibold\">\r\n          Update Prediction Status\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n          <form onSubmit={submit}>\r\n            <FormControl>\r\n              <FormLabel htmlFor={pred.id + '_status'}>Status</FormLabel>\r\n              <RadioGroup name=\"status\">\r\n                <Stack direction=\"column\">\r\n                  {[\r\n                    'Prediction In-Progress',\r\n                    'Prediction Ended',\r\n                    'Result Declared',\r\n\t\t\t\t\t'Cancelled',\r\n                  ].map((option, i) => {\r\n                    return (\r\n                      <Radio key={i} value={option}>\r\n                        <Box\r\n                          borderWidth=\"1px\"\r\n                          borderColor=\"purple.400\"\r\n                          p=\"2\"\r\n                          borderRadius=\"2xl\"\r\n                        >\r\n                          {option}\r\n                        </Box>\r\n                      </Radio>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <Button type=\"submit\">Submit</Button>\r\n          </form>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst AddNewPrediction = () => {\r\n  const [num, setNum] = React.useState(0);\r\n  // const { connected, connect, activeAccount } = useWallet();\r\n  const [options, setOptions] = React.useState({});\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const { prediction, resultRef, start, end } = e.target.elements;\r\n\r\n    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\tconst endValue = new Date(end.value).toISOString();\r\n\tconst startValue = new Date(start.value).toISOString();\r\n\r\n    const op = await contract.methods\r\n      .addprediction(\r\n        endValue,\r\n        resultRef.value,\r\n        prediction.value,\r\n        Object.keys(options).map((key) => options[key]),\r\n        startValue\r\n      )\r\n      .send({amount : 2});\r\n\tawait op.confirmation(1);\r\n    alert(\"Prediction Created!\");\r\n  };\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button>Add New Prediction</Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent padding=\"4\">\r\n        <form onSubmit={submit}>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"prediction\">Prediction</FormLabel>\r\n            <Input name=\"prediction\" id=\"prediction\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"resultRef\">Result Reference</FormLabel>\r\n            <Input name=\"resultRef\" id=\"resultRef\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"start\">Start</FormLabel>\r\n            <Input type=\"datetime-local\" name=\"start\" id=\"start\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"end\">End</FormLabel>\r\n            <Input type=\"datetime-local\" name=\"end\" id=\"end\"></Input>\r\n          </FormControl>\r\n          <FormControl>\r\n            <FormLabel htmlFor=\"number_options\">Number of Options</FormLabel>\r\n            <Input\r\n              onChange={(e) => {\r\n                console.log(e);\r\n                setNum(parseInt(e.target.value) || 0);\r\n              }}\r\n              name=\"number_options\"\r\n              id=\"number_options\"\r\n              type=\"number\"\r\n            ></Input>\r\n          </FormControl>\r\n          {[...Array(num).keys()].map((i) => {\r\n            return (\r\n              <FormControl>\r\n                <FormLabel htmlFor={'option_' + i}>Option {i}</FormLabel>\r\n                <Input\r\n                  onChange={(e) =>\r\n                    setOptions((options) => {\r\n                      var opt = options;\r\n                      opt[`option_${i}`] = e.target.value;\r\n                      return opt;\r\n                    })\r\n                  }\r\n                  name={`option_${i}`}\r\n                  id={`option_${i}`}\r\n                ></Input>\r\n              </FormControl>\r\n            );\r\n          })}\r\n          <Button type=\"submit\">Submit</Button>\r\n        </form>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nexport default function MyPreds() {\r\n  const { predictionsArray } = React.useContext(PredictionContext);\r\n  const { connected, connect, activeAccount } = useWallet();\r\n  const [myPreds, setMyPreds] = React.useState([]);\r\n  const colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n  };\r\n\r\n  \r\n\r\n  React.useEffect(() => {\r\n    (async function () {\r\n      if (!connected) {\r\n        await connect();\r\n      }\r\n\t    const contract = await wallet.at(CONTRACT_ADDRESS);\r\n\t\tconst storage = await contract.storage();\r\n\t\tconst admin = storage.admin;\r\n\t\tconsole.log(admin);\r\n      if (activeAccount) {\r\n\r\n        const _ = []; \r\n\t\tfor ( let x = 0 ; x < predictionsArray.length ; x++) {\r\n\t\t\t  \r\n\t\t\t  let item = predictionsArray[x].value;\r\n\t\t\t if (item.proposer === activeAccount.address || admin === activeAccount.address) {\r\n\t\t\t\t_.push(item);\r\n\t\t\t\t\r\n\t\t\t }\r\n\t\t}\r\n        console.log(_);\r\n        setMyPreds(_);\r\n      }\r\n    })();\r\n  }, [activeAccount]);\r\n\r\n  return myPreds ? (\r\n    <Container\r\n      width=\"auto\"\r\n      maxWidth=\"100vw\"\r\n      bg={colors.bg}\r\n      height=\"auto\"\r\n      maxHeight=\"100vh\"\r\n      padding=\"10vh\"\r\n    >\r\n      <AddNewPrediction />\r\n      <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\r\n        {myPreds.map((pred, i) => {\r\n          return (\r\n            <Box\r\n              key={i}\r\n              // onClick={}\r\n              display=\"flex\"\r\n              maxWidth=\"300px\"\r\n              border=\"1px solid\"\r\n              borderRadius=\"15px\"\r\n              padding=\"20px\"\r\n              margin=\"10px\"\r\n            >\r\n              <Text color={colors.text}>{pred.predictionName}</Text>\r\n              <UpdatePredStatus pred={pred} />\r\n              <AddPredRes pred={pred} />\r\n            </Box>\r\n          );\r\n        })}\r\n      </Box>\r\n\t \r\n    </Container>\r\n\r\n  ) : (\r\n    <Loading />\r\n  );\r\n}\r\n\r\nconst Portfolio = () => {\r\n\t//const { isOpen, onOpen, onClose } = useDisclosure();\r\n\tconst colors = {\r\n    bg: useColorModeValue('blue.100', 'blue.900'),\r\n    text: useColorModeValue('blue', 'white'),\r\n\t\r\n  };\r\n\tconst { connect, disconnect, activeAccount, connected } = useWallet();\r\n\tconst [data, setData] = React.useState(null);\r\n\tlet ledger = [];\r\n\tReact.useEffect( async () => {\r\n\t\tif (!connected) {\r\n\t\t\tawait connect();\r\n\t\t}\r\n\t\tif (activeAccount) {\r\n\t\t\tconsole.log(activeAccount);\r\n\t\t\tconsole.log(activeAccount.address);\r\n\t\t\tconst tokenContract =await Tezos.contract.at(TOKEN_ADDRESS);\r\n\t\t\tconst tokenStore = await tokenContract.storage();\r\n\t\t\tconst tokenLedger = tokenStore.ledger;\r\n\t\t\tconsole.log(tokenLedger);\r\n\t\t\tlet tokens = tokenStore.all_tokens.toString().split(',').map(Number);\r\n\t\t\tconsole.log(tokens);\r\n\t\t\t\r\n\t\t\tfor (let tokenId = tokens.length-1 ; tokenId>=0; tokenId--) {\t\r\n\t\t\t\tconsole.log(tokenId,tokens[tokenId]);\r\n\t\t\t\tawait tokenLedger.get([activeAccount.address, tokens[tokenId]])\r\n\t\t\t\t\t.then(value => { ledger.push({id:tokens[tokenId], balance: value.toString()})})\r\n\t\t\t\t\t.catch(error => console.log(`Error: ${tokens[tokenId]} ${activeAccount.address}`));\r\n\t\t\t\tconsole.log(ledger)\r\n\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tsetData(ledger);\r\n\t\t};\r\n\t\r\n\t},[activeAccount]);\r\n\treturn data ?(\r\n\t<Container\r\n      width=\"auto\"\r\n      maxWidth=\"100vw\"\r\n      bg={colors.bg}\r\n      height=\"auto\"\r\n      maxHeight=\"100vh\"\r\n      padding=\"10vh\"\r\n    >\r\n\t\r\n\t\t\t<Text color={colors.text}>Portfolio</Text>\r\n      \t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\r\n\t\t\t\t{data.map((pred, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t    \t\t\t// onClick={}\r\n\t\t\t\t\t\t\tdisplay=\"flex\"\r\n\t\t\t\t\t\t\tmaxWidth=\"300px\"\r\n\t\t\t\t\t\t\tflexDirection=\"row\"\r\n\t\t\t\t\t\t\tborder=\"1px solid\"\r\n\t\t\t\t\t\t\tborderRadius=\"15px\"\r\n\t\t\t\t\t\t\tpadding=\"20px\"\r\n\t\t\t\t\t\t\tmargin=\"10px\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Token id &nbsp;: &nbsp; {pred.id} &nbsp;</Text>\r\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Balance &nbsp; :&nbsp; {pred.balance}</Text>\r\n\t\t\t\t\t\t</Box>\r\n\t\t            );\r\n                })}\r\n\t\t\t</Box>\r\n\t\t  </Container>\r\n \r\n  ):(\r\n    <Loading />\r\n  );\r\n};\r\n\t\r\n","import React from 'react';\r\nimport { BrowserRouter, Routes, Route, useParams  } from 'react-router-dom';\r\nimport { ChakraProvider, ColorModeProvider } from '@chakra-ui/react';\r\nimport Header from './components/Header';\r\nimport Predict from './components/Predict';\r\nimport './App.css';\r\nimport Home from './components/Home';\r\nimport { ContractProvider, CONTRACT_ADDRESS } from './helper/tezos';\r\nimport PredictionContext from './helper/PredictionContext';\r\nimport Loading from './helper/Loading';\r\nimport MyPreds from './components/Mypreds';\r\n\r\nfunction App() {\r\n  const [predictions, setPredictions] = React.useState(null);\r\n  const [predictionsArray, setPredictionsArray] = React.useState([]);\r\n  const updatePredictions = (preds, predArray) => {\r\n    setPredictions(preds);\r\n    setPredictionsArray(predArray);\r\n  };\r\n  const { id } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    ContractProvider.at(CONTRACT_ADDRESS).then(async (contract) => {\r\n      const storage = await contract.storage();\r\n      const predictions = storage.predictions;\r\n\t  const counter = storage.Id;\r\n\t  const predList = [];\r\n      // for (let key of storage.predictTokenDetails.keys()) {\r\n      //   console.log(key);\r\n      //   console.log(storage.predictTokenDetails.get(key));\r\n      // }\r\n      for (let pred =10; pred < counter; pred++  ) {\r\n\t  \t await predictions.get(pred).then(value => { predList.push({ id: pred, value }) });\r\n\t\t \r\n      \r\n      }\r\n      updatePredictions(predictions, predList);\r\n\t\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <ColorModeProvider\r\n        options={{\r\n          initialColorMode: 'dark',\r\n          useSystemColorMode: true,\r\n        }}\r\n      >\r\n        {predictions ? (\r\n          <>\r\n            <PredictionContext.Provider\r\n              value={{\r\n                predictions,\r\n                predictionsArray,\r\n                updatePredictions,\r\n              }}\r\n            >\r\n              <BrowserRouter>\r\n                <Header />\r\n\t\t\t\t<Routes>\r\n                <Route exact path=\"/\"  element = {<Home />} />  \r\n\t\t\t\t\r\n\t\t\t\t\r\n                <Route\r\n                  path=\"/predict/:id\"\r\n                  element = {<Predict />}\r\n                />\r\n\r\n                <Route path=\"/mypreds\" element ={<MyPreds />} />\r\n\t\t\t\t</Routes>\r\n              </BrowserRouter>\r\n            </PredictionContext.Provider>\r\n          </>\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </ColorModeProvider>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ColorModeScript } from '@chakra-ui/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript initialColorMode=\"dark\" />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}